package com.kpm.util{import com.kpm.games.walkthewalk.GCMovement;import fl.transitions.Tween;	import fl.transitions.easing.*;		import flash.display.*;	import flash.events.Event;	import flash.events.TimerEvent;	import flash.filters.DropShadowFilter;	import flash.geom.ColorTransform;	import flash.utils.Timer;	import flash.utils.getTimer;			public class GameComponent extends MovieClip{				public var mDragging 			: Boolean = false;		public var mHoldPosition 		: Point2D;		public var Size 				: ESize;		protected var mMovie 			: MovieClip;		protected var mScale			: Number;		protected var mColor			: EColor;		public var feedbackSound 		: String;		public var feedbackObject 		: Object;		private var blinkTimer			: Timer;		protected var movieName			: String;        public var mAnimationList_Mc          : Array;        public var index                : uint;        public var done                 : Boolean;        private var _numeral 	        : uint;        private var _gcMove                : GCMovement;        public function set MovieName(pMovieName : String):void		{			movieName = pMovieName;            mAnimationList_Mc= new Array(10);            var pMovie : MovieClip = Util.createMc(movieName);						if(pMovie == null)				throw new Error("movie is null");						if(mMovie != null)				removeChild(mMovie);							mMovie = pMovie;			addChild(mMovie);            mAnimationList_Mc[pMovieName] = mMovie;		}				public function addMovie(pMovieName : String, hor : Boolean, pBetweenDist : int = 0)		{            mAnimationList_Mc[pMovieName] = (Util.createMc(pMovieName));			if(hor)				mAnimationList_Mc[pMovieName].x = Movie.width + pBetweenDist; //+ secondMovie.width/2;			else				mAnimationList_Mc[pMovieName].y = Movie.height + pBetweenDist;// + secondMovie.height/2;							Movie.addChild(mAnimationList_Mc[pMovieName]);						}        public function addMovieClipAbove(pMovieClip : MovieClip, hor : Boolean, pBetweenDist : int = 0)        {            Util.debug("GameComponent.addMovieClip : " + pMovieClip);            if(hor)                pMovieClip.x = Movie.width + pBetweenDist; //+ secondMovie.width/2;            else                pMovieClip.y = Movie.height + pBetweenDist;// + secondMovie.height/2;            mAnimationList_Mc.push(pMovieClip);            Movie.addChild(pMovieClip);        }        public function addMovieBelow(pMovieName : String)        {            Util.debug("GameComponent.addMovieBelow : " + pMovieName);            var mc : MovieClip = Util.createMc(pMovieName);            mAnimationList_Mc[pMovieName] = mc;            Movie.addChild(mc);            Movie.setChildIndex(mc, 0);        }        //$Move GC to a destination, possibility to specify scale and traveltime        //if traveltime is not specified it uses the Speed values of mGCM        public function gotoDestination(pDest: Point2D, pScale: Number = 1.0, pAnimationName : String = "moveLeft", pTravelTime: Number = -1, isJump : Boolean = false, pFunc : Function = null): GCMovement {            gcMove.setupMovement(this.x, this.y, pDest.x, pDest.y, this.scaleX, this.scaleX * pScale);            gcMove.addEventListener(GCMovement.GC_MOTION_FINISH, pFunc, false, 0 , true);            if(pTravelTime > 0) gcMove.TravelTime = pTravelTime;            animate(pAnimationName);            gcMove.move(this, isJump);            return gcMove;        }        //$ go back to default transformation for this player        private function faceDefault(event: Event){            this.rotation = 0;            this.scaleX = Math.abs(this.scaleX);            this.scaleY = Math.abs(this.scaleY);            this.removeEventListener(GCMovement.GC_MOTION_FINISH, faceDefault);        }        public function animate(pLabel : String, pNumAnims : Number = 0)        {            if(pNumAnims > 1)                pLabel = pLabel + Util.getRandBtw(1,pNumAnims);            Util.debug("will play " + pLabel);            mMovie.gotoAndPlay(pLabel);            if(typeof(mMovie.inside) != "undefined")                mMovie.inside.gotoAndPlay(pLabel);        }        public static function createGCFromMc(pMcName : String, args : Array)        {            var temp : GameComponent =  new GameComponent();            temp.MovieName = pMcName;            for (var i=0; i <args.length; i+=2)            {                temp[args[i]] = args[i+1];            }            return temp;        }				public function get Movie() : MovieClip 	{ return mMovie;}		public function get Position(): Point2D 	{ return new Point2D(x,y);}		public function get Scale() : Number 		{ return mScale; }		public function get MovieName() : String 	{ return movieName; }		public function get Color() : EColor 		{ return mColor;	}					public function set Position(pPosition:Point2D):void 		{		   x = pPosition.x;		   y = pPosition.y;		}				public function set Scale(pScale : Number) : void		{			mScale = pScale;			mMovie.scaleX = mScale;			mMovie.scaleY = mScale;						//Util.debug("setting scale " + mMovie.scaleX + " " + mMovie.scaleY)		}				public function scaleAsBig(pHeight : uint = 0, pWidth : uint = 0)		{			var actualHeight, actualWidth, scale;			actualHeight = height * mMovie.scaleY;			actualWidth = width * mMovie.scaleX;						if(pHeight)				scale = pHeight/actualHeight;  			else				scale = pWidth/actualWidth;						Scale = scale;		}						public function clone(pMovie : MovieClip)		{			x 			= pMovie.x;			y 			= pMovie.y;			scaleX 		= pMovie.scaleX;			scaleY 		= pMovie.scaleY;			rotation	= pMovie.rotation;				alpha 		= pMovie.alpha			transform   = pMovie.transform;		}				public function set Color(pColor : EColor)		{ 			if(Movie && Movie.tColor)			{				var ct : Object = GameLib.colorTransforms[pColor.Text];				Movie.tColor.transform.colorTransform = 				new ColorTransform(ct.ra, ct.ga, ct.ba, 1, ct.rb, ct.gb, ct.bb, 1); 				mColor = pColor;								Util.debug("setting color to " + mColor);			} 		}        public function set ColorAll(pColor : EColor)        {            if(Movie)            {                var ct : Object = GameLib.colorTransforms[pColor.Text];                Movie.transform.colorTransform =                        new ColorTransform(ct.ra, ct.ga, ct.ba, 1, ct.rb, ct.gb, ct.bb, 1);                mColor = pColor;                Util.debug("setting color to " + mColor);            }        }        public function setColorOfMovie(pColor : EColor,  pMovieIndex : String)        {                Util.debug("GC.setColorOfMovie" + mAnimationList_Mc[pMovieIndex]);                Util.printArray(mAnimationList_Mc);                if(pColor && mAnimationList_Mc[pMovieIndex])                {                    var ct : Object = GameLib.colorTransforms[pColor.Text];                    mAnimationList_Mc[pMovieIndex].transform.colorTransform =                        new ColorTransform(ct.ra, ct.ga, ct.ba, 1, ct.rb, ct.gb, ct.bb, 1);                    mColor = pColor;                    Util.debug("setting color to " + mColor);                }        }        public function setColorMc(pColor : EColor, pInside : MovieClip = null)        {            var coloredMovie : MovieClip;            if(pInside) coloredMovie = pInside;            else        coloredMovie = Movie;            if(coloredMovie)            {                var ct : Object = GameLib.colorTransforms[pColor.Text];                coloredMovie.transform.colorTransform =                        new ColorTransform(ct.ra, ct.ga, ct.ba, 1, ct.rb, ct.gb, ct.bb, 1);                mColor = pColor;                Util.debug("setting color to " + mColor);            }        }        public function execTween(pTween : Object) : Tween		{							if(pTween.tween == "rotation") {				pTween.initial = pTween.initial.rotation;				pTween.target = pTween.target.rotation;				Util.debug("rotating", this);				Util.debug(pTween.initial, this);				Util.debug(pTween.target, this);								if(pTween.initial - pTween.target >= 180)					pTween.target = 360 + pTween.target;				Util.debug(pTween.target, this);			}						else if (pTween.tween == "x") {				pTween.initial = pTween.initial.x;				pTween.target = pTween.target.x;								}						else if (pTween.tween == "y") {				pTween.initial = pTween.initial.y;				pTween.target = pTween.target.y;								}						else if (pTween.tween == "scaleX") {				pTween.initial = pTween.initial.scaleX;				pTween.target = pTween.target.scaleX;								}						else if (pTween.tween == "scaleY") {				pTween.initial = pTween.initial.scaleY;				pTween.target = pTween.target.scaleY;								}						if(pTween.ease != -1)				pTween.ease = Strong.easeIn;			else pTween.ease = null							var myTween : Tween  = new Tween(this, pTween.tween, pTween.ease, pTween.initial, 						 								 										pTween.target, pTween.time, true);			return myTween;					}				public function startBlink ( pPeriod : uint, pNumTimes)		{			blinkTimer = new Timer(pPeriod , pNumTimes);			blinkTimer.start();							blinkTimer.addEventListener(TimerEvent.TIMER, blink, false, 0 , true);			blinkTimer.addEventListener(TimerEvent.TIMER_COMPLETE, blinkComplete, false, 0 , true);		}				public function blink(e : TimerEvent)		{			if(alpha == 100)				alpha = 0;			else				alpha = 100;		}				public function blinkComplete(e : TimerEvent)		{			alpha = 100;		}				public function drag() 		{			if(!mDragging)			{				Util.debug("dragging " + x  + " " + y, this);				mDragging = true;				dropShadow(true);				mHoldPosition = new Point2D(x, y);				startDrag();			}		}		public function drop()		{			//Util.debug("dropping", this);			mDragging = false;            dropShadow(false);			stopDrag();		}				public function returnToHoldPosition()		{			x = mHoldPosition.x;							y = mHoldPosition.y;		}				public function dropShadow(set : Boolean)		{			if(!set)			{				Movie.filters = null;				return;			}						var dropShadow:DropShadowFilter = new DropShadowFilter();			var filtersArray:Array = new Array(dropShadow);						dropShadow.color = 0x000000;			dropShadow.blurX = 22;  dropShadow.blurY = 22;			dropShadow.angle = 135; dropShadow.alpha = 0.5;			dropShadow.distance = 15;			Movie.filters = filtersArray;		}        public function centerMc()        {            x-= width/2;            y-= height/2;        }				public function get Dragging() : Boolean		{			return mDragging;		}        public function get numeral():uint {            return _numeral;        }        public function set numeral(value:uint):void {            _numeral = value;        }        public function get gcMove():GCMovement {            return _gcMove;        }        public function set gcMove(value:GCMovement):void {            _gcMove = value;        }    }}