package com.kpm.util{import com.de.polygonal.ds.Array2;import flash.display.*;import flash.events.Event;import flash.events.IOErrorEvent;	import flash.events.MouseEvent;import flash.events.TimerEvent;import flash.geom.ColorTransform;	import flash.geom.Matrix;	import flash.geom.Point;	import flash.geom.Rectangle;	import flash.media.Sound;	import flash.net.URLRequest;import flash.text.TextField;import flash.utils.*;	public class Util	{				public static var traceCounter : int = 0;		public static const RELEASE : Boolean = false;		public static const DEBUG : Boolean = true;        public static const INDEX_X                : int = 0;        public static const INDEX_Y                : int = 1;        public static const INDEX_HEIGHT           : int = 0;        public static const INDEX_WIDTH            : int = 1;        public static const INDEX_MIN              : int = 0;        public static const INDEX_MAX              : int = 1;				public static function getRandomExtreme(pMaxDistance : uint, pMaxNumber: uint) : Number		{			if(pMaxDistance == 0)				return Util.getRandBtw(0, pMaxNumber)							var tempExtreme : Number = Util.getRandBtw(0,pMaxDistance*2);						if (tempExtreme <= pMaxDistance) 				return tempExtreme;			else				return pMaxNumber - (tempExtreme - pMaxDistance);					}				public static function getRandBtw (a : int, b: int) : Number		{			return Math.round((Math.random() * (b - a)) + a);		}				public static function getRandBtwF(a : Number, b: Number) : Number		{			return (Math.random() * (b - a)) + a;		}				public static function  getRandomAngleBetween (a : int, b: int) : Number		{			var angle = Math.round(Math.random() * (b - a) + a);			if(Util.getRandBtw(0,1) == 0)			{				angle *= -1;			}						return angle;						}				public static function  manhDistance(pPos1 : Point2D, pPos2 : Point2D) : Number		{			return (Math.abs(pPos1.x - pPos2.x) + Math.abs(pPos1.y - pPos2.y));		}				public static function getRandomPointInOtherHalf(pPoint : Point2D, pBoard : Board)		{			var x, y : uint;						if(pPoint.x > pBoard.NumCols/2)			{				x = Util.getRandBtw(0, pBoard.NumCols /2 - 1);			}							else			{				x =	Util.getRandBtw(pBoard.NumCols /2-1, pBoard.NumCols-1);			}						if(pPoint.y > pBoard.NumRows/2)			{				y = Util.getRandBtw(0, pBoard.NumRows /2 - 1);			}							else			{				y =	Util.getRandBtw( pBoard.NumRows /2-1,  pBoard.NumRows-1);			}						return new Point2D(x,y);		}				public static function getRandomPointFarEnough(pInitialPos : Point2D, pBoard : Board, pDistance : uint, pNumTries : int = 30, pMaxPerAxe : Number = 10, pNeedEmptyPath : Boolean = false) : Point2D		{			var tempObj : TiledGameComponent;			var randomCut : uint; 			tempObj = new TiledGameComponent(pBoard, new Point2D(1,1));						var deltaX, deltaY;						Util.debug("Util.getRandomPointFarEnough for " + pInitialPos);						var i=0;			do			{				i++;								do				{					randomCut = Util.getRandBtw(0, pDistance);				}				while(randomCut >= pMaxPerAxe);								Util.debug("random cut " + randomCut);				Util.debug("pDistance " + pDistance);				Util.debug("ratio " + pMaxPerAxe);								deltaX = randomCut;				deltaY = pDistance - randomCut;								if(Util.getRandBtw(0,1) == 1)  deltaX = -1*deltaX;				if(Util.getRandBtw(0,1) == 1)  deltaY = -1*deltaY;								tempObj.Tile = new Point2D(pInitialPos.x + deltaX, pInitialPos.y + deltaY)				Util.debug("generating temp pos" + tempObj.Tile + " " + deltaX + " " + deltaY, Util);								if(i > pNumTries)				{					pBoard.printLogicBoard();					return null;				}									if(pNeedEmptyPath && !pBoard.isEmptyPath(pInitialPos, tempObj.Tile))					tempObj.Tile = Board.NULL_POINT;			}			while(!pBoard.isEmpty(tempObj, [pInitialPos]) || !pBoard.inBounds(tempObj.Tile))						return tempObj.Tile;		}						public static function pushToSet(pDestArray : Array , pElement : Object) : Boolean		{			if(!Util.searchInArray(pDestArray, pElement))			{				Util.debug("Util.pushToSet " + pDestArray + " " + pElement.Text);				pDestArray.push(pElement);				return true;			}			Util.debug(pElement.Text + " already exsits in array");			return false;		}				public static function pushToArray(pDestArray : Array , pElement : Object)		{			Util.debug("Util.pushToArray " + pDestArray.length + " " + pElement.Text);			pDestArray.push(pElement);		}				public static function intersect							(pMovie1: MovieClip, pMovie2 : MovieClip, pNamespace : MovieClip) : Boolean		{			var bounds1 : Rectangle = pMovie1.getBounds(pNamespace);			var bounds2 : Rectangle = pMovie2.getBounds(pNamespace);            //Util.printArray(["bounds1 : ", bounds1.toString(), "| bounds2 : ", bounds2.toString()],"Util.intersect");            //Util.printArray(["Movie.pos ", pMovie1.x, pMovie1.y, "Movie2.pos", pMovie2.x,  pMovie2.y]);			return (bounds1.intersects(bounds2))		}				public static function round(num:Number, precision:int) : Number		{			var decimalPlaces:Number = Math.pow(10, precision);			Util.debug("rounding " + num + " " + Math.round(decimalPlaces * num) / decimalPlaces, Util);			return Math.round(decimalPlaces * num) / decimalPlaces;		}							public static function generateConsecutiveNumbersAround(pGoal : Number, pMax : Number ) : Array		{			Util.debug("Util.generateNumberArray for " + pGoal + " and max number " + pMax);			var a, b, minOptionsNum : uint;			var numberArray : Array = new Array();						var numCounters = (pMax == 3) ? 3 : 5;						a = Math.max(1, pGoal - (numCounters -1));			b = Math.min(pGoal, pMax - (numCounters-1));			b = Math.max(1,b);			 			  			minOptionsNum = Util.getRandBtw(a,b);							Util.debug("min options num " + minOptionsNum);			Util.debug("goal , max " + pGoal + " " + pMax + " " + a + " " + b);						for(var i= minOptionsNum; i<= minOptionsNum + numCounters -1; i++)			{				Util.debug("adding " + i + " to number list", Util);				numberArray.push(i);				}						return numberArray;		}		public static function hitBitmapData							(pMovie1: MovieClip, pMovie2 : MovieClip, namespace : MovieClip) : Boolean		{            Util.debug("hit bitmap data")			Util.debug(pMovie1.x + " " + pMovie1.y, Util);			Util.debug(pMovie2.x + " " + pMovie2.y, Util);			Util.debug(pMovie1.parent, Util);			Util.debug(pMovie2.parent, Util);						var blueRect:Rectangle = pMovie1.getBounds(namespace);			var blueOffset:Matrix = pMovie1.transform.matrix;			blueOffset.tx = pMovie1.x - blueRect.x;			blueOffset.ty = pMovie1.y - blueRect.y;						var pMovie1BmpData = new BitmapData(blueRect.width, blueRect.height, true, 0);			pMovie1BmpData.draw(pMovie1, blueOffset);							var redRect:Rectangle = pMovie2.getBounds(namespace);			var pMovie2BmpData = new BitmapData(redRect.width, redRect.height, true, 0);					var redOffset:Matrix = pMovie2.transform.matrix;			redOffset.tx = pMovie2.x - redRect.x;			redOffset.ty = pMovie2.y - redRect.y;						pMovie2BmpData.draw(pMovie2, redOffset);						var rLoc:Point = new Point(redRect.x, redRect.y);			var bLoc:Point = new Point(blueRect.x, blueRect.y);						if(pMovie2BmpData.hitTest(rLoc, 255, pMovie1BmpData, bLoc, 255))				return true;			else				return false;					pMovie1BmpData.dispose();			pMovie2BmpData.dispose();		}				public static function generateColorTransform(pColor : Number) : ColorTransform			{			var myColorTransform : ColorTransform = new ColorTransform();		   	myColorTransform.color = pColor		    		    return myColorTransform			}						public static function generateColor() : Number		{			return (Math.random() * 0xFFFFCC);			}				public static function addPoint2D(p1 : Point2D, p2 : Point2D) : Point2D		{			return new Point2D(p1.x + p2.x, p1.y + p2.y);		}				public static function multPoint2D(p : Point2D, pMult : Number) : Point2D		{			return new Point2D(p.x * pMult , p.y * pMult);		}				public static function middlePoint2D(p1 : Point2D, p2 : Point2D) : Point2D		{			var tempPoint : Point2D = Util.addPoint2D(p1,p2);			return new Point2D(tempPoint.x/2, tempPoint.y/2);		}				public static function interpolatePoint2D								(p1 : Point2D, p2 : Point2D, pFraction : Number) : Point2D		{						var tempPoint : Point2D = Util.addPoint2D(p1,p2);			Util.debug("fraction " + pFraction, Util);			return new Point2D(tempPoint.x*pFraction, tempPoint.y*pFraction);		}				public static function addNoise(p1: Point2D, pBoard : Board, pPercent: Number) : Point2D		{			var noiseX, noiseY, maxNoiseX, maxNoiseY : uint;			maxNoiseX = pBoard.NumCols*pPercent/100;			maxNoiseY = pBoard.NumRows*pPercent/100;						noiseX = Util.getRandBtw(-maxNoiseX, maxNoiseX);			noiseY = Util.getRandBtw(-maxNoiseY, maxNoiseY);			return new Point2D(p1.x + noiseX, p1.y + noiseY);					}					public static function addNoiseTiles(p1: Point2D, pDist : Point2D) : Point2D		{			var noiseX, noiseY : int;			noiseX = Util.getRandBtw(-pDist.x, pDist.x);			noiseY = Util.getRandBtw(-pDist.y, pDist.y);			return new Point2D(p1.x + noiseX, p1.y + noiseY);					}				public static function addNoiseRandomAxe(p1: Point2D, pBoard : Board, pDistance: uint) : Point2D		{			var noiseX, noiseY, maxNoise;						pDistance = Util.getRandBtw(0, pDistance);						if(Util.getRandBtw(0,1) == 1)				pDistance = -1*pDistance;							if(Util.getRandBtw(0,1) == 1)							return new Point2D(p1.x + pDistance, p1.y);			else				return new Point2D(p1.x, p1.y + pDistance);								}        public static function createAndPositionMc(mcIName:String, pX : Number = 0, pY :Number = 0) : MovieClip        {            var newMC : MovieClip = Util.createMc(mcIName);            newMC.x = pX;            newMC.y = pY;						return newMC;        }		public static function createMc(mcIName:String) : MovieClip 	    {//	    	var root : MovieClip//			while (pMovie.parent !=null)//				root = pMovie.parent as MovieClip;							var tMC:Class =  getDefinitionByName(mcIName) as Class;			var newMc:MovieClip = new tMC() as MovieClip;			return newMc;		}        public static function createBt (btName : String) : SimpleButton        {            var tBt : Class = getDefinitionByName(btName) as Class;            var newBt : SimpleButton = new tBt() as SimpleButton;            return newBt;        }		public static function createSound(mcIName:String) : Sound	    {			Util.debug("@Util.createSound " + mcIName);				    	var newSound:Sound;	    				try			{	    		var tMC:Class = getDefinitionByName(mcIName + ".mp3") as Class;			}	    	catch (error : Error) { Util.debug(error, Util);}						if(!tMC)			{				try				{					var tMC:Class = getDefinitionByName(mcIName) as Class;				}				catch (error : Error) { Util.debug(error, Util); return null; }			}						newSound = new tMC() as Sound;									return newSound;		}				public static function loadSound(pSound : KpmSound)		{		  	pSound.sound = new Sound();	    	pSound.sound.addEventListener(IOErrorEvent.IO_ERROR, function() { return null });	    	var url : URLRequest = new URLRequest(pSound.name +".mp3") 			pSound.sound.load(url);			Util.debug("trying to load " + url.url, Util);		}				//return the string associated with the function		public static function getClassName(o:Object):String	    {		       var fullClassName:String = getQualifiedClassName(o);	       	       var result : Array = fullClassName.split("::");	      // Util.debug("classtype is " + fullClassName);	       return result[result.length-1];	 	}	 		 	public static function sameClass(o1 : Object, o2 : Object) : Boolean	 	{	 		Util.debug("Util.sameclass ? + " + Util.getClassName(o1) + " " + Util.getClassName(o2));	 		if(Util.getClassName(o1) == Util.getClassName(o2))	 			return true;	 		else 	 			return false;	 	}	 			//return the string associated with the function		public static function getFullClassName(o:Object):String	    {		       var fullClassName:String = getQualifiedClassName(o); 	       return fullClassName;	 	}	 				    public static function initEnumConstants(inType :*) :void	    {	        var type :XML = flash.utils.describeType(inType);	        for each (var constant :XML in type.constant)	            inType[constant.@name].Text = constant.@name;	    }	    	    public static function getConstantsInArray(inType :*) : Array	    {	    	var constArray : Array = new Array();	    		    	var type :XML = flash.utils.describeType(inType);	        for each (var constant :XML in type.constant)	        {	        	//Util.debug("adding " + constant.@name + " to array", Util);	            constArray.push(inType[constant.@name]);	        }	        	        return constArray;	    }	    //	    public static function getEnum(inType:*, pString : String) : Object//	    {//	    	var type :XML = flash.utils.describeType(inType);//	    	return inType[constant.@name];//	    }//	 						public static function generateSetFromMc		(pMovieClip : MovieClip, pNumChildren: uint = 0) : Array		{			var tempMovie : MovieClip			var tempType  : String			var upperBound : uint;			if(pNumChildren == 0)				upperBound = 100;			else 				upperBound =  pNumChildren;			var boolArray : Array = new Array(upperBound);			var childSet : Array = new Array();						for(var i=0; i < pMovieClip.numChildren; i++)			{				boolArray[Util.getClassName(pMovieClip.getChildAt(i))] = false;				}			for(i=0; i < pMovieClip.numChildren; i++)			{				tempMovie = (pMovieClip.getChildAt(i)) as MovieClip;				tempType = Util.getClassName(tempMovie);				//Util.debug(tempMovie, Util);				//Util.debug(tempType, Util);				//Util.debug(boolArray[tempType], Util);								if(boolArray[tempType] == false)				{					childSet.push(tempType);						boolArray[tempType] = true;								//Util.debug(tempType, Util);				}			}						return childSet;		}				public static function generateNumberArray(pGoal : Number, pMax : Number ) : Array		{			Util.debug("Util.generateNumberArray for " + pGoal + " and max number " + pMax);			var a, b, minOptionsNum : uint;			var numberArray : Array = new Array();						if(pMax <= 5) 			{				Util.debug("generating number array for less than 5");				for(var j=1; j <= pMax; j++)					numberArray.push(ENumber.numbers[j]);				return numberArray;			}							a = Math.max(1, pGoal - 4);			b = Math.min(pGoal, pMax - 4);			 			minOptionsNum = Util.getRandBtw(a,b);							Util.debug("min options num " + minOptionsNum);			Util.debug("goal , max " + pGoal + " " + pMax + " " + a + " " + b);						for(var i= minOptionsNum; i<= minOptionsNum + 4; i++)			{				var num : String = ENumber.numbers[i];				Util.debug("adding " + num + " to number list", Util);				numberArray.push(num);				}						return numberArray;					}				public static function defineArrayWithDefault(pDefaultValue : Object, pSize : int) : Array		{			var array : Array = new Array();			for (var i=0; i < pSize; i++)				array[i] = pDefaultValue;							return array;								}						public static function getRandomElementNotIn(pArrayFrom : Array, pArrayNotIn : Array) : Object		{			var randomIndex; //			Util.debug("pArray From", Util);//			Util.printArray(pArrayFrom);//			Util.debug("pArray Not in", Util);//			Util.printArray(pArrayNotIn);						var candidateElement;			var i=0;						do 			{				randomIndex = Util.getRandBtw(0,pArrayFrom.length-1);				//Util.debug(pArrayFrom.length, Util);				candidateElement = pArrayFrom[randomIndex];				i++;			}			while (Util.searchInArray(pArrayNotIn, candidateElement) && i < pArrayFrom.length*10)						return candidateElement;					} 				public static function chooseRandomElements(pArray : Array, pNumElements : int)		{			var newArray : Array = new Array();			for(var i=0 ; i < pNumElements; i++)			{				newArray.push(Util.getRandomElementNotIn(pArray, newArray));			}						return newArray;		}				public static function intersectArray(pArray1 : Array, pArray2 : Array) : Array		{			var newArray : Array = new Array();						for (var i in pArray1)				for (var j in pArray2)				{					//Util.debug("comparing " + pArray1[i] + " to " + pArray2[j], Util);					if(pArray1[i].equals(pArray2[j]))					{						newArray.push(pArray1[i]);						//Util.debug("success", Util);					}				}									return newArray;		}		public static function searchInArray(pArray : Array, pElement : Object) : Boolean		{			if(pElement == null || pArray == null)			{			 	//Util.debug("searching null ! " + pArray + " " + pElement, Util);			 	return false;			}								 			//Util.debug("Search in array", Util); 						for (var i =0; i < pArray.length; i++)			{				//Util.debug("comparing " + pElement + " to " + pArray[i], Util);				if(pArray[i])				{						if(pElement is String || pElement is Number || pElement is int)					{						//Util.debug("pelement is string", Util);						if(pElement == pArray[i])							return true;					}					else					{						//Util.debug("pelement is " + Util.getClassName(pElement), Util);						if(pElement.equals(pArray[i]))						{							//Util.debug("same!!!", Util);							return true;							}											} 								}												}						return false;		}				public static function filterArray(pArray : Array, pFilter : String)		{			var filterClass : Class = getDefinitionByName(pFilter) as Class;			for (var i =0; i < pArray.length; i++)			{				if(pArray[i] is filterClass)				{					pArray[i].remove();					}				}		}				public static function shuffleArray(pArray : Array) : Array		{            return pArray.sort(randomize);		}        public static function randomize ( a : *, b : * ) : int {            return ( Math.random() > .5 ) ? 1 : -1;        }    public static function assertFailed(pArray : Array)        {            throw ("ASSERT FAILED " + Util.printArray(pArray));        }        public static function printObject(pObj : Object)        {            for (var i:* in pObj) trace(i+" :: "+pObj[i]);;        }		public static function randomColorTransform() : ColorTransform		{		    var myColorTransform:ColorTransform = new ColorTransform();		    myColorTransform.color = Util.generateColor();		    		    return myColorTransform;			}					public static function copyColor(pMovie1 : MovieClip, pMovie2 : MovieClip)		{			pMovie2.transform.colorTransform = pMovie1.transform.colorTransform;			}								public static function copySize(pMovie1 : MovieClip, pMovie2 : MovieClip)		{//			Util.debug(pMovie1.parent.parent.scaleX + " " + pMovie1.parent.parent.scaleY, Util);//			Util.debug(pMovie1.parent.scaleX + " " + pMovie1.parent.scaleY, Util);//			Util.debug(pMovie2.height + " " + pMovie2.scaleY + " " + pMovie1.height + " " + pMovie2.scaleY, Util);//			Util.debug(pMovie2.width + " " + pMovie2.scaleX + " " + pMovie1.width + " " + pMovie2.scaleX, Util);					var temp : Number = pMovie1.rotation;			pMovie1.rotation = 0;			pMovie2.height = pMovie1.height*pMovie1.parent.parent.scaleY;				pMovie2.width = pMovie1.width*pMovie1.parent.parent.scaleX;					pMovie1.rotation = temp;					}				public static function copyRotation(pMovie1 : MovieClip, pMovie2 : MovieClip)		{			pMovie2.rotation = pMovie1.rotation;			}				public static function getGlobalCoordinates(pMovie : MovieClip) : Point2D		{			var point : Point = pMovie.parent.localToGlobal(new Point(pMovie.x, pMovie.y));			var p     : Point2D = new Point2D(point.x, point.y); 			//Util.outputScale(pMovie);			return p;		}				public static function outputScale(pMovie : MovieClip)		{			var temp : MovieClip = pMovie;						while(temp is MovieClip)			{				Util.debug(temp+"", Util);				Util.debug(temp.scaleX + "", Util);				Util.debug(temp.scaleY + "", Util);				temp = temp.parent as MovieClip;			}								}				public static function printArray(pArray : Array, pOrigin : Object = null) : String		{            var pString : String = "";            if(!pArray || pArray.length == 0)            {                Util.debug("array empty", Util);                return "";            }            for each (var value:String in pArray) {                if(pOrigin)                    pString += "     ";                pString +=  value + " ";            }		    if(pOrigin)                Util.debug(pOrigin);            Util.debug(pString);						return pString;		}        public static function printArray2(pArray2 : Array2)        {            for(var i=0; i < pArray2.width; i++)                for(var j=0; j < pArray2.height; j++)                {                    Util.debug(" [" + i + "] [ " + j + "] = " +  pArray2.get(i,j));                }        }		public static function setMask(	pMovie : MovieClip, pMask : MovieClip, 										pSize : Point2D, pPosition : Point2D)		{			pMask.height = pSize.y;			pMask.width = pSize.x;			pMask.y = pPosition.y;			pMask.x = pPosition.x;			pMovie.mask = pMask;		}				public static function makePathFrom		(pFrom : Point2D, pTo : Point2D, pNumberOfTurns : uint) : Array		{			var fromPoint, toPoint, midPoint : Point2D;			var positionArray : Array = new Array(); 			//var numberOfTurns : uint = Util.getRandomNumberBetween(1, pMaxTurnsInPath);			var movesWithoutTurns : uint = Util.manhDistance(pFrom,pTo) / (pNumberOfTurns+1);						var incx : uint = Util.slope(pTo.x - pFrom.x);			var incy : uint = Util.slope(pTo.y - pFrom.y);						if(pNumberOfTurns == 0)			{				if(incx == 0 || incy == 0)				{					for(var i = 0; i < movesWithoutTurns; i++)					{						midPoint = new Point2D(incx, incy);						positionArray.push(midPoint);						//midPoint.print();					}											return positionArray;					}			}			else				Util.debug("number of turns is not 1", Util);							var array1, array2 : Array;			if(Util.getRandBtw(0,1) == 0)			{				array1 = Util.makePathFrom(pFrom, new Point2D(pFrom.x, pTo.y), 0);				array2 = Util.makePathFrom(new Point2D(pFrom.x, pTo.y), pTo, 0);			}						else 			{				array1 = Util.makePathFrom(pFrom, new Point2D(pTo.x, pFrom.y), 0);				array2 = Util.makePathFrom(new Point2D(pTo.x, pFrom.y), pTo, 0);			}						Util.debug("array1");			Util.printArray(array1);			Util.debug("array2");			Util.printArray(array2);			positionArray = positionArray.concat(array1);			positionArray = positionArray.concat(array2);						return positionArray;		}				public static function slope(pNum : Number) : int		{			if(pNum > 0 ) return 1;			if(pNum < 0) return -1;			return 0;		}				public static function cloneMovie(pClassName : String, pFrom : MovieClip) : MovieClip		{							var cloned : MovieClip 	= Util.createMc(pClassName);			cloned.scaleX 			= pFrom.scaleX;			cloned.scaleY 			= pFrom.scaleY;			cloned.rotation	   		= pFrom.rotation;				cloned.x 				= pFrom.x;			cloned.y 				= pFrom.y;			cloned.alpha			= pFrom.alpha;						cloned.transform   		= pFrom.transform;			return cloned;		}				public static function cloneProperties(pFrom : MovieClip, pCloned : MovieClip)		{			pCloned.scaleX 			= pFrom.scaleX;			pCloned.scaleY 			= pFrom.scaleY;			pCloned.rotation	    = pFrom.rotation;				pCloned.x 				= pFrom.x;			pCloned.y 				= pFrom.y;			pCloned.alpha			= pFrom.alpha;						pCloned.transform   	= pFrom.transform;		}		public static function changeCoordToParent		(pMovie : MovieClip, pParent : MovieClip, pRoot : MovieClip) : Point2D		{			var coord : Point2D = Util.getGlobalCoordinates(pMovie);			//Util.debug(pParent, Util);			//Util.debug(pParent.parent, Util);			while (pParent != pRoot)			{				//Util.debug("parent " + pParent.parent.parent, Util);				coord.x -= pParent.x*1280/1000;				coord.y -= pParent.y*pParent.parent.height/600;								pParent = pParent.parent as MovieClip; 					 				//Util.debug("next iteration " + pParent, Util);			}						return coord;			}				public static function getRandomFrom(pArray : Array) : Object		{			if(!pArray) throw new Error("array is null");			var i = Util.getRandBtw(0, pArray.length-1);			//Util.debug("randommmmmmm " + i, Util);			return pArray[i];		}				public static function changeMovieSize(pMovie : MovieClip, pScale : Number, pScaleY : Number = 0)  : MovieClip		{						Util.debug("changeMovieSize " + pMovie + " " + pScale);			var transform : Matrix = pMovie.transform.matrix;			var tempRotation = pMovie.rotation;						pMovie.rotation = 0;			//pMovie.transform.matrix = null;			pMovie.scaleX*= pScale;			pMovie.scaleY*= (pScaleY == 0)? pScale : pScaleY;			//pMovie.transform.matrix = transform;			pMovie.rotation = tempRotation;						return pMovie;		}				public static function changeSimilarScales(pMovie1 : MovieClip, pMovie2 : MovieClip, pPercent : int, pMin : Point2D, pMax : Point2D, pSize1 : Number, pSize2 : Number)		{			var scaleXDiff : Number = Math.abs(pMovie1.scaleX) -  Math.abs(pMovie2.scaleX);			var scaleYDiff : Number = Math.abs(pMovie1.scaleY) - Math.abs(pMovie2.scaleY);						var scaleChange : Point = new Point(1,1);			var closeTo : Boolean = Util.closeTo(1+scaleXDiff, pPercent) && Util.closeTo(1+scaleYDiff, pPercent); 			var changeX : int = Util.getRandBtw(0,1);								Util.debug("Util.changeSimilarScales fixing scale for " + pMovie1 + scaleChange + " " + pMovie1.scaleX  + " " + pMovie1.scaleY + " " + pMovie2.scaleX + " " + pMovie2.scaleY);			Util.debug(pMovie1.width + " " + pMovie1.height + " " + scaleXDiff + " " + scaleYDiff);						//if shape in list is smaller than shape in puzzle, or bigger than allowed width 			if((closeTo && scaleXDiff < 0 && changeX == 0) || pMovie1.width > pMax.x)				scaleChange.x= Util.getRandBtwF(1 - pSize1 - pSize2, 1 - pSize1);			else if((closeTo && scaleXDiff > 0 && changeX == 0) || pMovie1.width < pMin.x)				scaleChange.x= Util.getRandBtwF(1 + pSize1 , 1 + pSize1 + pSize2);							if((closeTo && scaleYDiff < 0 && changeX == 1) || pMovie1.height > pMax.y)				scaleChange.y= Util.getRandBtwF(1 - pSize1 - pSize2, 1 - pSize1);			else if ((closeTo && scaleYDiff > 0 && changeX == 1) || pMovie1.height < pMin.y)				scaleChange.y= Util.getRandBtwF(1 + pSize1 , 1 + pSize1 + pSize2);						if(pMovie1.Type.indexOf("Rectangle") != -1 || pMovie1.Type.indexOf("Triangle") != -1			 || pMovie1.Type.indexOf("Trapezoid") != -1 || pMovie1.Type.indexOf("Oval") != -1)			{					Util.changeMovieSize(pMovie1, scaleChange.x, scaleChange.y);			}			else			{				if(scaleChange.x != 1)					Util.changeMovieSize(pMovie1, scaleChange.x);				else					Util.changeMovieSize(pMovie1, scaleChange.y);							} 			 						if(scaleChange.x != 1 || scaleChange.y != 1)			{				Util.debug("Util.changeSimilarScales");				Util.debug("fixing scale for " + pMovie1 + scaleChange + " " + pMovie1.scaleX  + " " + pMovie1.scaleY + " " + pMovie1.height + " " + pMovie1.width + " " + pMovie2.scaleX + " " + pMovie2.scaleY)			}					}//		//		public static function changeSimilarScales(pMovie1 : MovieClip, pMovie2 : MovieClip, pPercent : int = 20, pMaxHeight : int)//		{//			var scaleRatio : Number = scale1/scale2;//			var scaleMult1 : Number;//			//			var scaleChange : Boolean = Util.checkSimilarScales(pMovie1, pMovie2, pPercent);//			var variant : Number;//			//			if(scaleChange)//			{//				Util.debug("Util.similarScales " + pMovie1 + " " + pMovie1.height + " " + pMovie1.width + " " + pMovie2);//				//				if(pMovie1.scaleX > pMovie2.scaleX || pMovie2.height > pMaxHeight)//				{//					scaleMult1 = Util.getRandBtwF(0.7,0.9);//					Util.debug("scaling down " + scaleMult1);//				}//				else//				{//					scaleMult1 = Util.getRandBtwF(1.1,1.3);//					Util.debug("scaling up " + scaleMult1)	//				}//					//				pMovie1.scaleX *= scaleMult1;//				pMovie1.scaleY *= scaleMult1;//				Util.debug("Util.similarScales " + pMovie1 + " " + pMovie1.height + " " + pMovie1.width + " " + pMovie2.height + " " + pMovie2.width);//			}//			//			//			//		}				public static function checkSimilarScales(pMovie1 : MovieClip, pMovie2 : MovieClip, pPercent)  : Boolean		{			var scale1 : Number = Math.abs(pMovie1.scaleX) - Math.abs(pMovie2.scaleX);			var scale2 : Number =  Math.abs(pMovie1.scaleY) - Math.abs(pMovie2.scaleY);			//var scaleRatio : Number = scale1/scale2;						var tRotation1 = pMovie1.rotation;			var tRotation2 = pMovie2.rotation;						Util.debug("checkSimilar Height and Width for " + pMovie1 + " " + pMovie2 + " " + scale1 + " " + scale2);			Util.debug("scales " + pMovie1.scaleX + " " + pMovie1.scaleY + " " + pMovie2.scaleX + " " + pMovie2.scaleY);			pMovie1.rotation = 0;			pMovie2.rotation = 0;			Util.debug("scales " + pMovie1.scaleX + " " + pMovie1.scaleY + " " + pMovie2.scaleX + " " + pMovie2.scaleY);												var height1 : Number = Math.abs(pMovie1.height-pMovie2.height);			var width1 : Number = Math.abs(pMovie1.width-pMovie2.width);						var heightMultiple = (pMovie1.height*pMovie1.width + pMovie1.height*pMovie1.width)			var heightCheck = heightMultiple < 3200;						Util.debug(pMovie1.height + " " + pMovie1.width);			Util.debug(pMovie2.height + " " + pMovie2.width);						pMovie1.rotation = tRotation1;			pMovie2.rotation = tRotation2;												//return Util.closeTo(scale1, pPercent)+Util.closeTo(scale2, pPercent)+Util.closeTo(height1,pPercent)+Util.closeTo(height2,pPercent);						var similarHeight : Boolean = (height1 < pPercent && width1 < pPercent);			var similarScale : Boolean = Util.closeTo(1 + scale1, pPercent) && Util.closeTo(1 + scale2, pPercent)						Util.debug("similar height " + similarHeight)			Util.debug("similar scale " + similarScale)						if(heightCheck)				return similarHeight			else				return similarScale;		}				public static function closeTo(pNumber : Number, pPercent)		{			Util.debug("Util.closeTo " + pNumber);						if(pNumber < 1 + pPercent/100 && pNumber > 1 - pPercent/100)				return 1;						else return 0;		}				public static function removeChild(mc : DisplayObject)		{			if(mc && mc.parent) mc.parent.removeChild(mc);		}        public static function removeListofMc(pArray : Array)        {            for (var i=0; i < pArray.length; i++)            {                Util.removeChild(pArray[i]);            }        }				public static function removeChildsOf(mc : MovieClip)		{            while (mc.numChildren > 0) {                mc.removeChildAt(0);            }		}						public static function createURLVars(pAttributeContent : String, pAttributeNames : String,  pSpaceDelimiter : String)        {            Util.debug("Util.stringToArray " + pSpaceDelimiter);            var content : Array = pAttributeContent.split(pSpaceDelimiter);            var names : Array = pAttributeNames.split(pSpaceDelimiter);            Util.printArray(content);            Util.printArray(names);            var urlVars : String = "";            for (var i=0 ; i< content.length ; i++)            {                if(i>0 && i < content.length-1)                    urlVars+= "&";                urlVars += names[i]+"="+content[i];            }            Util.debug("Util.stringToArray returns " + urlVars);            return urlVars;        }				public static function objectToXmlString(pRoot : String, pObject : Object) : String		{			var xmlString = "<"+pRoot;						for (var prop:String in pObject) 			{				xmlString += " " + prop + "=\"" + pObject[prop] + "\"";				Util.debug(prop, Util); 				Util.debug(pObject[prop], Util); 			}						xmlString += "></" +pRoot + ">"			Util.debug("xmlString : " + xmlString, Util);						return xmlString;						}				public static function cloneArray(pArray : Array) : Array		{		 	var array = new Array();		 	for each (var p in pArray)			{				//Util.debug("cloning " + p, Util);				array.push(p);			}						return array;		 			}		public static function debug(pDebugObj : Object, pSource : Object = null)		{			//if(Util.traceCounter > 2500)			//	return;							var debugStr : String;			if(!pDebugObj)				debugStr = "object is null";			else if(pDebugObj is String)				debugStr = String(pDebugObj);			else				debugStr = pDebugObj.toString();						if(Util.DEBUG)			{					if(pSource )					trace(Util.getClassName(pSource) + " : " + debugStr);				else 				{					trace(Util.traceCounter + " " + debugStr);					Util.traceCounter++;									}			}		}				public static function getTodayDate(pFormat : String = null) : String		{									var date : Date = new Date();			var dateString : String = "";			var dateSeparator : String = "-";			var separator : String = "T";			var timeSeparator : String = ":";						Util.debug("today's date? " + date.toString() + " " + date.getMonth() + " " + date.getDate())			if(pFormat == "xquery")			{				dateString += date.getFullYear() + dateSeparator;				dateString += Util.twoDigitNumber(date.getMonth()+1) + dateSeparator;				dateString += Util.twoDigitNumber(date.getDate()) + separator;				dateString += Util.twoDigitNumber(date.getHours()) + timeSeparator;				dateString += Util.twoDigitNumber(date.getMinutes()) + timeSeparator;				dateString += Util.twoDigitNumber(date.getSeconds());							}			else if (pFormat == "compact")			{				dateString += Util.twoDigitNumber(date.getMonth()+1) + dateSeparator;				dateString += Util.twoDigitNumber(date.getDate()) + dateSeparator;				dateString += date.getFullYear();			}			else if (pFormat == null)			{				dateString = date.toString();			}						return dateString;		}						public static function getFirstLetters(pString : String, pNumber : int)		{			var stringArray : Array = pString.split(" ");						var letterString = "";						for(var i=0; i < stringArray.length; i++)				letterString += stringArray[i].substr(0,2);							return letterString		}						public static function twoDigitNumber(pNumber : Number) : String		{			var zero = "";			if(pNumber < 10 && pNumber > 0)				zero = "0"							return zero + pNumber;		}				public static function removeXMLNode(pNode : XML)		{			delete pNode.parent().children()[pNode.childIndex()];		}				public static function getFileName(fullPath: String) : String		{		    var fSlash: int = fullPath.lastIndexOf("/");		    var bSlash: int = fullPath.lastIndexOf("\\"); // reason for the double slash is just to escape the slash so it doesn't escape the quote!!!		    var slashIndex: int = fSlash > bSlash ? fSlash : bSlash;		    Util.debug("Util.getFileName " + fullPath + " " + slashIndex + " " + fullPath.substr(slashIndex + 1));		    return fullPath.substr(slashIndex + 1);		}				public static function hideMc(pMc : MovieClip)		{			if(pMc) pMc.visible = false		}				public static function showMc(pMc : MovieClip)		{			if(pMc) pMc.visible = true;		}				public static function sortXMLByAttribute($xml	:	XML, $attribute	: String, 												  $options:	Object	=	null, $copy	:	Boolean	=	false) :XML		 {			//store in array to sort on			var xmlArray:Array	= new Array();			var item:XML;			for each(item in $xml.children())			{				var object:Object = {					data	: item, 					order	: item.attribute($attribute)				};				xmlArray.push(object);			}					//sort using the power of Array.sortOn()			xmlArray.sortOn('order',$options);					//create a new XMLList with sorted XML			var sortedXmlList:XMLList = new XMLList();			var xmlObject:Object;			for each(xmlObject in xmlArray )			{				sortedXmlList += xmlObject.data;			}						if($copy)			{				//don't modify original				return	$xml.copy().setChildren(sortedXmlList);			}			else			{				//original modified				return $xml.setChildren(sortedXmlList);			}		 }		 		 public static function addButton(pMovieName : String, pParent : MovieClip, pX, pY, pFunc : Function = null, pParam : Object = null)		 {		 	var newButton : SimpleButton;		 	newButton = Util.createBt(pMovieName);		 	pParent.addChild(newButton);		 	newButton.x = pX;		 	newButton.y = pY;		 			 	if(pFunc != null)		 		if(pParam)		 			EventManager.addEvent(newButton, MouseEvent.CLICK, pFunc, pParam);		 		else		 			EventManager.addEvent(newButton, MouseEvent.CLICK, pFunc);		 			 	return newButton;		 }        public static function getSecondsFrom1970()        {            var now:Date = new Date();            var epoch:Number = Math.round(now.valueOf()/1000);            return epoch;        }        public static function addButtonBox(pButton : MovieClip, pBox : MovieClip, pSizeX : Number = 0, pSizeY : Number = 0) : MovieClip        {            var oneoverscale : Number = 1;            var tempRotation : Number = pButton.rotation;            pButton.rotation = 0;            if(pSizeX == 0) { pSizeX = pButton.width*1/pButton.scaleX*1.15; }            if(pSizeY == 0) { pSizeY = pButton.height*1/pButton.scaleY*1.15; }            pBox.width  = pSizeX;            pBox.height = pSizeY;            if(pBox.height < 50)                pBox.height = 50;            if(pBox.width < 50)                pBox.width = 50;            pButton.rotation = tempRotation;            pBox.alpha = 0;            Util.debug("Util.addButtonBox " + pBox.width + " " + pBox.height + " " + pButton.scaleX + " " + pButton.scaleY + " " + pBox.scaleX + " " + pBox.scaleY);            return pBox;        }        public static function compareDates(dateA : int, dateB : int)        {            if(Math.abs(dateA - dateB) < 60)                return 0;            else if(dateA - dateB > 0)                return 1;            else                return -1;        }        public static function minimumNatural(a : int, b : int)        {            //Util.debug("Util.minimumNatural" + a + " " + b);            var r : int = 0;            if(a==0 && b==0)                r= 0;            if(a == 0 && b!=0)                r= b;            else if(b == 0 && a!=0)                r = a;            else if(b > 0 && a > 0)                r = Math.min(a,b);            //Util.debug("return " + r)            return r;        }    public static function createTimer(pPeriod : int, times : int, pRepeatFunc : Function, pCompleteFunc : Function )    {        Util.printArray(["period", pPeriod,  "times", times],"Util.createTimer");        var timer = new Timer(pPeriod , times);        timer.start();        if(pRepeatFunc) timer.addEventListener(TimerEvent.TIMER, pRepeatFunc, false, 0 , true);        timer.addEventListener(TimerEvent.TIMER_COMPLETE, pCompleteFunc, false, 0 , true);        return timer;    }    public static function centerMc(pMc : MovieClip)    {        pMc.x -= pMc.width/2;        pMc.y -= pMc.height/2;    }    public static function bringToFront(mcl:MovieClip) {        mcl.parent.setChildIndex(mcl,mcl.parent.numChildren - 1);    }    /*public SimpleMatrix product(SimpleMatrix m) {    if(this.getColumns() != m.getRows()) return null;    SimpleMatrix outcome = new SimpleMatrix(this.getRows(),m.getColumns());    Double sumProduct = 0.0;    for(int i = 0 ; i < getRows(); i++)    {        for(int j = 0; j < m.getColumns(); j++)        {            sumProduct=0.0;            for(int k=0;k<getColumns();k++)            {                sumProduct+=this.get(i, k)*m.get(k,j);            }//end k            outcome.set(i, j, sumProduct);        }//end j    }//end i    return outcome;}    */        public static function matrixmult(m1 : Array2 , m2 : Array2)        {            Util.debug("Util.matrixmult " + m1.width + " " + m2.height)            if(m1.width != m2.height )                return;            var outcome : Array2 = new Array2(m1.width, m2.height)            var sumProduct : Number;            for(var i = 0 ; i < m1.width; i++)            {                for(var j = 0; j < m2.height; j++)                {                    sumProduct=0.0;                    for(var k=0;k< m1.height;k++)                    {                        sumProduct+= m1.get(i, k)*m2.get(k,j);                    }//end k                    outcome.set(i, j, sumProduct);                    Util.debug("outcome.set(i,j,sumProduct) => " + i + " " + j + " " + sumProduct)                }            }            return outcome;        }        public static function matrixSubstract(m1 : Array2 , m2 : Array2)        {            Util.debug("Util.matrixsubtract ");            Util.debug(m1.width + " " + m1.height);            Util.debug(m1.width + " " + m2.height);            var outcome : Array2 = new Array2(m1.width, m2.height)            var sumProduct : Number;            for(var i = 0 ; i < m1.width; i++)            {                for(var j = 0; j < m2.height; j++)                {                    sumProduct=0.0;                    for(var k=0;k< m1.height;k++)                    {                        sumProduct+= m1.get(i, k)*m2.get(k,j);                    }//end k                    outcome.set(i, j, sumProduct);                    Util.debug("outcome.set(i,j,sumProduct) => " + i + " " + j + " " + sumProduct)                }            }            return outcome;        }        public static function assignIfNotNull(pLeft : Object, pRight : Object)        {            Util.debug(["pLeft  :",  pLeft , " pRight : " , pRight], "Util.assignIfNotNull")            pLeft = pRight ? pRight : pLeft;            Util.debug(["pLeft  :",  pLeft , " pRight : " , pRight], "Util.assignIfNotNull")        }    public static function assignIfNull(pLeft : Object, pRight : Object)    {        Util.debug(["pLeft  :",  pLeft , " pRight : " , pRight], "Util.assignIfNull")        pLeft = pLeft ? pLeft : pRight;    }    public static function unitTest(pFunc : Function)    {        if(Util.DEBUG)            return pFunc();        else return false;    }    public static function addEmptyBox(pComp : GameComponent)    {        if(pComp != null)        {            //Util.debug("adding box" + i );            var emptyBox : MovieClip = Util.addButtonBox(pComp, new EmptyBox())            var sizeY = pComp.height;            pComp.addChild(emptyBox);            pComp.setChildIndex(emptyBox, 0);        }    }    public static function createTextField(pText : String, pos : Array, size : Array)    {        var t : TextField = new TextField();        t.x = pos[0];        t.y = pos[1];        t.width = size[0];        t.height = size[1];        return t;    }  }}