package com.kpm.util{	import flash.utils.Dictionary;	import com.kpm.kpm.BubbleId;	import com.kpm.kpm.EBName;	import com.kpm.kpm.EBStd;	import com.kpm.games.EGameCharacter;	import com.kpm.games.EState;		import flash.media.Sound;	import flash.media.SoundChannel;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.Event;	import com.as3collections.ArrayQueue;		public class KpmSoundLibrary extends EventDispatcher 	{		var mSoundDictionaryList : Array;		var events : Dictionary;		var soundManager 		: SoundChannel;		var soundQueue			: ArrayQueue;		var currentSoundKey		: String;				var defaultLanguage	: ELanguage;		var defaultGame		: EGame		var defaultGameChar	: EGameCharacter;		var defaultBubbleName	: Object;		var notPlaying : Boolean = true;        var lastInstruction : String ;						// Constructor of the Kpm Sound Library						public function KpmSoundLibrary(pLanguageList : Array)		{			Util.debug("KpmSoundLibrary.Constructor");			Util.printArray(pLanguageList)			mSoundDictionaryList = new Array(pLanguageList.length);			soundManager = new SoundChannel()			soundQueue = new ArrayQueue();			events = new Dictionary();						for each (var lang : ELanguage in pLanguageList)			{				mSoundDictionaryList[lang.Text] = new Dictionary();			}			//playSound(ELanguage.OBI, EGame.G1, EGameCharacter.Bee, EBName.IdentifyNumeral, ESoundType.Instruction, ENumber.one );		}		// every time the language is changed, all the sounds for the new language will be added to the library				public function createLibrary(pLang : ELanguage, pGame : EGame, pChar : EGameCharacter, pBubbleName : Object)		{			defaultLanguage = pLang; defaultGame = pGame ; defaultGameChar = pChar; defaultBubbleName = pBubbleName;				//Driver			addLibSound(ESoundType.Feedback, "Welcome", ELanguage.ENG)							addLibSound(ESoundType.Feedback, EState.BAD_MOVE);			addLibSound(ESoundType.Feedback, EState.GOOD_TASK);			addLibSound(ESoundType.Feedback, "Silence1");			addLibSound(ESoundType.Feedback, "Silence2");						addLibSound(ESoundType.Instruction, "Interjection", defaultLanguage);			addLibSound(ESoundType.Feedback, EState.OK_MOVE, defaultLanguage)			addLibSound(ESoundType.Feedback, EState.GOOD_MOVE, defaultLanguage)			addLibSound(ESoundType.Feedback, GameLib.TRY_AGAIN, defaultLanguage)						//IdentifyNumber			addLibSound(ESoundType.InstructionClick, ENumber.one, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.two, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.three, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.four, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.five, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.six, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.seven, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.eight, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.nine, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.ten, defaultLanguage, null, null, EBStd.Numbers_Identify);            //IdentifyNumber : G3            addLibSound(ESoundType.InstructionClick, "one", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "two", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "three", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "four", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "five", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "six", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "seven", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "eight", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "nine", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);            addLibSound(ESoundType.InstructionClick, "ten", defaultLanguage, EGame.G3, null, EBStd.Numbers_Identify);						//IdentifyNumber			addLibSound(ESoundType.FeedbackClick, ENumber.one, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.two, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.three, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.four, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.five, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.six, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.seven, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.eight, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.nine, defaultLanguage);			addLibSound(ESoundType.FeedbackClick, ENumber.ten, defaultLanguage);            if(defaultGame == EGame.G4 || defaultGame == EGame.G1) {                addLibSound(ESoundType.FeedbackClick, ENumber.eleven, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.twelve, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.thirteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.fourteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.fifteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.sixteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.seventeen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.eighteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.nineteen, defaultLanguage);                addLibSound(ESoundType.FeedbackClick, ENumber.twenty, defaultLanguage);			addLibSound(ESoundType.InstructionClick, ENumber.eleven, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.twelve, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.thirteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.fourteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.fifteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.sixteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.seventeen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.eighteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.nineteen, defaultLanguage, null, null, EBStd.Numbers_Identify);			addLibSound(ESoundType.InstructionClick, ENumber.twenty, defaultLanguage, null, null, EBStd.Numbers_Identify);            }			//Spatial Sense - for game1			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.SpatialSense);            addLibSound(ESoundType.Instruction, "1", defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.SpatialSense);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.VirtualPath);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.IdentifySpatial);						addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.SpatialSense);            addLibSound(ESoundType.Instruction, "1", defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.SpatialSense);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.VirtualPath);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.IdentifySpatial);						addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.SpatialSense);            addLibSound(ESoundType.Instruction, "1", defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.SpatialSense);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.VirtualPath);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.IdentifySpatial);						//Identify Color - General, G1, G3			var colorsG1 : Array = [EColor.Red, EColor.Blue, EColor.Green, EColor.Yellow, EColor.Orange];			Util.debug("adding sounds for IdentifyColor")						for each (var color in colorsG1)			{				addLibSound(ESoundType.InstructionClick, color, defaultLanguage, null, null, EBName.IdentifyColor);								addLibSound(ESoundType.FeedbackClick, color, defaultLanguage);								addLibSound(ESoundType.InstructionClick, color, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.IdentifyColor);				addLibSound(ESoundType.FeedbackClick, color, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.IdentifyColor);				addLibSound(ESoundType.InstructionClick, color, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.IdentifyColor);				addLibSound(ESoundType.FeedbackClick, color, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.IdentifyColor);				addLibSound(ESoundType.InstructionClick, color, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.IdentifyColor);				addLibSound(ESoundType.FeedbackClick, color, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.IdentifyColor);				addLibSound(ESoundType.InstructionClick, color, defaultLanguage, EGame.G3, null, EBName.IdentifyColor);				addLibSound(ESoundType.FeedbackClick, color, defaultLanguage, EGame.G3, null, EBName.IdentifyColor);			}					//Identify Size - General, G1, G3							var sizes : Array = [ESize.Small, ESize.Big];			Util.debug("adding sounds for IdentifySize")						for each (var size in sizes)			{				addLibSound(ESoundType.InstructionClick, size, defaultLanguage, null, null, EBName.IdentifySize);				addLibSound(ESoundType.FeedbackClick, size, defaultLanguage);				addLibSound(ESoundType.InstructionClick, size, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.IdentifySize);				addLibSound(ESoundType.FeedbackClick, size, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBName.IdentifySize);				addLibSound(ESoundType.InstructionClick, size, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.IdentifySize);				addLibSound(ESoundType.FeedbackClick, size, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBName.IdentifySize);				addLibSound(ESoundType.InstructionClick, size, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.IdentifySize);				addLibSound(ESoundType.FeedbackClick, size, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBName.IdentifySize);				addLibSound(ESoundType.InstructionClick, size, defaultLanguage, EGame.G3, null, EBName.IdentifySize);				addLibSound(ESoundType.FeedbackClick, size, defaultLanguage, EGame.G3, null, EBName.IdentifySize);				//subsetG4bird				addLibSound(ESoundType.Instruction, size, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Numbers_Subset);			}						Util.debug("adding sounds for Count")			addLibSound(ESoundType.Instruction, null, defaultLanguage, null, null, EBStd.Numbers_Count);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBStd.Numbers_Count);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBStd.Numbers_Count);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBStd.Numbers_Count);						//G4 Count, and Addition use the same question.			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Numbers_Count);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Numbers_Count);									Util.debug("adding sounds for Subset G1 and G4")					for each (var color1 in colorsG1)			{				addLibSound(ESoundType.Instruction, color1, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, color1, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBStd.Numbers_Subset);                addLibSound(ESoundType.Instruction, color1, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, color1, defaultLanguage, EGame.G3, null, EBStd.Numbers_Subset);				//subset g4bird				addLibSound(ESoundType.Instruction, color1, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Numbers_Subset);			}            Util.debug("adding sounds for Subset G3")            var attributesColorSizeG3 : Array = ["red-animals", "blue-animals", "green-animals", "yellow-animals", "orange-animals", "small-animals", "big-animals"];            for each (var attribute1 in attributesColorSizeG3)            {                addLibSound(ESoundType.Instruction, attribute1, defaultLanguage, EGame.G3, null, EBStd.Numbers_Subset);            }						var colorsG4Monkey = [EColor.Brown, EColor.Orange, EColor.Yellow, EColor.Grey]						for each (var color2 in colorsG4Monkey)			{				addLibSound(ESoundType.Instruction, color2, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, color2, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Numbers_Subset);			}						for each (var size1 in sizes)			{				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G1, EGameCharacter.Frog, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G1, EGameCharacter.Mouse, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G1, EGameCharacter.Bee, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G3, null, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Numbers_Subset);				addLibSound(ESoundType.Instruction, size1, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Numbers_Subset);							}									//Identify Shape - G2						var shapes : Array = ["Square", "Rectangle", "Circle", "Hexagon", "Triangle", 				"Oval", "Parallelogram","Pentagon", "Trapezoid"]			Util.debug("adding sounds for IdentifyShape")			for each (var shape in shapes)			{				addLibSound(ESoundType.InstructionClick, shape, defaultLanguage, null, null, EBName.IdentifyShape);				addLibSound(ESoundType.FeedbackClick, shape, defaultLanguage);				addLibSound(ESoundType.FeedbackClick, shape + "Name", defaultLanguage);			}						//PlaceShape - G2						addLibSound(ESoundType.Feedback, "HelpPlaceShape", defaultLanguage, EGame.G2);			addLibSound(ESoundType.Instruction, "PlaceShape", defaultLanguage, EGame.G2);						//MatchShape - G2			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G2, null, EBName.MatchShape);									//G4			//Comparison					Util.debug("adding sounds for Comparison")			//OBI_ALL_Comparison_Instruction_Or			addLibSound(ESoundType.Instruction, "Or", defaultLanguage);			//OBI_G4Bird_Comparison_Instruction			addLibSound(ESoundType.Instruction, null , defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Comparison);						//OBI_G4Bird_Comparison_Instruction_Red			for each (var color in colorsG1)			{				addLibSound(ESoundType.Instruction, color , defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Comparison);				addLibSound(ESoundType.FeedbackClick, color , defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Comparison);							}						//OBI_G4Monkey_Comparison_Instruction					addLibSound(ESoundType.Instruction, null , defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Comparison);			//OBI_G4Monkey_Comparison_Instruction_Grey			for each (var color in colorsG4Monkey)			{				addLibSound(ESoundType.Instruction, color , defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Comparison);				addLibSound(ESoundType.FeedbackClick, color , defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Comparison);				addLibSound(ESoundType.Instruction, color, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Numbers_Subset);			}						Util.debug("adding sounds for Addition")			//OBI_G4Monkey_Feedback_Addition_Look			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);			addLibSound(ESoundType.Instruction, null, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);						addLibSound(ESoundType.Instruction, "House", defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);			addLibSound(ESoundType.Instruction, "House", defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);						addLibSound(ESoundType.Instruction, "Altogether", defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);			addLibSound(ESoundType.Instruction, "Altogether", defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);						addLibSound(ESoundType.Feedback, "Look", defaultLanguage);						var numbers1 : Array = [ENumber.one, ENumber.two, ENumber.three, ENumber.four, ENumber.five, ENumber.six, ENumber.seven, ENumber.eight, ENumber.nine]			var numbers2 : Array = [ENumber.one, ENumber.two, ENumber.three, ENumber.four, ENumber.five];												for each (var n1 in numbers1)			{				//OBI_G4Monkey_Feedback_Addition_1				addLibSound(ESoundType.Instruction, n1, defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);				addLibSound(ESoundType.Instruction, n1, defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);								//OBI_G4Monkey_Feedback_Addition_1_house				addLibSound(ESoundType.Instruction, [n1, "house"], defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);				addLibSound(ESoundType.Instruction, [n1, "house"], defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);			}						for each (var n2 in numbers2)			{							//OBI_G4Monkey_Feedback_Addition_1_more				addLibSound(ESoundType.Instruction, [n2, "more"], defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);				addLibSound(ESoundType.Instruction, [n2, "more"], defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);								//OBI_G4Monkey_Feedback_Addition_1_more_house				addLibSound(ESoundType.Instruction, [n2, "more", "house"], defaultLanguage, EGame.G4, EGameCharacter.Monkey, EBStd.Addition);				addLibSound(ESoundType.Instruction, [n2, "more", "house"], defaultLanguage, EGame.G4, EGameCharacter.Bird, EBStd.Addition);			}						//G3.Count			var animals : Array = ["squirrels", "butterflies", "cats", "dogs", "chickens", "elephants", "fish", "horses", "tigers"];						Util.debug("adding sounds for G3.Count")						for each (var animal in animals)			{				addLibSound(ESoundType.Instruction, animal, defaultLanguage, EGame.G3, null, EBStd.Numbers_Count);			}									//Output all sounds in the dictionary after add lib						Util.debug("sound dictionary after adding addlib");			for (var key:Object in mSoundDictionaryList[defaultLanguage.Text]) {				Util.debug(key);			}		}				// Store sound in hash, given 		public function addLibSound(pSoundType : ESoundType, pAttribute : Object = null, pLang : ELanguage = null, pGame : EGame = null, pChar : EGameCharacter = null, pBubbleIdentifier : Object = null)		{						//if(pBubbleName)			//	Util.debug("addlib sound " + pBubbleName.Text + " " + defaultBubbleName.Standard.Text)							if(pBubbleIdentifier == defaultBubbleName || pBubbleIdentifier == null || pBubbleIdentifier.Text == defaultBubbleName)			if(pChar == defaultGameChar || pChar == null)				if(pGame == defaultGame || pGame == null)			if(pLang == defaultLanguage || pLang == null || pLang == ELanguage.ALL)				{				Util.debug("KpmSoundLibrary.addLibSound " + pLang + " " + pBubbleIdentifier + " " + defaultBubbleName + " " + pChar + " " + defaultGameChar + " " + pGame + " " + defaultGame);				var soundKey : String = createSoundKey(pSoundType, pAttribute, pLang, pGame, pChar, pBubbleIdentifier);				var appendix : String = "'";				var newSound : Sound = Util.createSound(soundKey + "_" + appendix);				mSoundDictionaryList[soundKey.slice(0,3)][soundKey] = new Array();				//If soundkey requires multiple sounds,				if(newSound)				{							do					{						if(newSound)							mSoundDictionaryList[soundKey.slice(0,3)][soundKey].push(newSound);												Util.debug("Adding sound in language " + soundKey.slice(0,3) + " with soundkey " + soundKey + " and contents " + newSound);						appendix += "'";												newSound = Util.createSound(soundKey + "_" + appendix);																	}					while(newSound != null)										}				//else, soundkey requires only one sound				else				{					mSoundDictionaryList[soundKey.slice(0,3)][soundKey] = Util.createSound(soundKey);					Util.debug("Adding sound in language " + soundKey.slice(0,3) + " with soundkey " + soundKey + " and contents " + mSoundDictionaryList[getLanguage(pLang).Text][soundKey]);				}			}		}				public function getLanguage(pLang)		{			if(pLang) return pLang			else return ELanguage.ALL;		}						public function playLibSound(pSoundType : ESoundType, pAttribute : Object = null, pLang : ELanguage = null, pGame : EGame = null, pChar : EGameCharacter = null, pBubbleName : Object = null, pEvent : String = "")		{			Util.debug("KpmSoundLibrary.playLibSound" );			Util.debug("soundQueue " + soundQueue)				var soundKey : String = createSoundKey(pSoundType, pAttribute, pLang, pGame, pChar, pBubbleName);						//if sound is not playing already, play 			if(notPlaying)			{				Util.debug("PLS.playing now ");				playSoundKey(soundKey);			}			//Otherwise schedule for playing at the end of the queue			else			{				Util.debug("PLS.enqueing " + soundKey);				soundQueue.enqueue(soundKey);			}						if(pEvent != "")				events[soundKey] = pEvent;            if(pSoundType == ESoundType.Instruction || pSoundType == ESoundType.InstructionClick)                lastInstruction = soundKey;		}        public function repeatLastInstruction()        {            if(!notPlaying)                this.forceStop();            Util.debug("KpmSoundLibrary.repeating last isntruction now ");            playSoundKey(lastInstruction);        }				private function playNextSound(e : Event, pSKFinished : String)		{			notPlaying = true;			Util.debug("KpmSoundLibrary.playNextSound" + events[pSKFinished]);						if(events[pSKFinished])				this.dispatchEvent(new Event(events[pSKFinished]));						Util.debug("soundQueue " + soundQueue);			var soundKey = soundQueue.dequeue();							if(soundKey)			{							playSoundKey(soundKey);			}				}		private function playSoundKey(pSk : String)		{			notPlaying = false;			Util.debug(pSk);			var sound : Object = mSoundDictionaryList[pSk.slice(0,3)][pSk];						Util.debug("KpmSoundLibrary.playNow " + sound);			//			Util.debug("sound dictionary playSoundKey");//			for (var key:Object in mSoundDictionaryList[ELanguage.OBI.Text]) {//				Util.debug(key);//			}			try			{				if(sound is Array)				{					var randNum = Util.getRandBtw(0, sound.length-1)					soundManager = sound[randNum].play();				}				else					soundManager = sound.play();								EventManager.addEvent(soundManager, Event.SOUND_COMPLETE, playNextSound, pSk)			}			catch(error: Error) { notPlaying = true; Util.debug(error, Util);  }								}		private function createSoundKey(pSoundType : ESoundType, pAttribute : Object = null, pLang : ELanguage = null, pGame : EGame = null, pChar : EGameCharacter = null, pBubbleName : Object = null) : String		{			Util.debug("KpmSoundLibrary.createSoundKey ");							if(!pLang) pLang = ELanguage.ALL;						if(!pAttribute || pAttribute == null)					pAttribute = "";			else if(!(pAttribute is String || pAttribute is Number))			{				if(pAttribute.Text)				{					Util.debug(pAttribute + " is an enum ")					pAttribute = pAttribute.Text				}				else				{					Util.debug(pAttribute + " is an object ")					var attributes = "";										for each(var pAttributeChild in pAttribute)					{						if(pAttributeChild is String)							attributes += pAttributeChild + "_";						else							attributes += pAttributeChild.Text + "_";												Util.debug("var in pAttribute " + attributes);					}											pAttribute = attributes.slice( 0, -1 );				}			}						var soundKey : String = (pLang ? pLang.Text + "_" : "");			soundKey += (pGame ? pGame.Text + (pChar ? pChar.Text  : "") + "_" : "ALL_");			soundKey += (pBubbleName ? pBubbleName + "_"  : "ALL_")			soundKey +=  (pSoundType ? pSoundType.Text  + "_" : "")			soundKey += pAttribute;						if(!pAttribute)				soundKey = soundKey.slice(0,-1);						Util.debug("CSK : " + soundKey);						return soundKey;		}				public function forceStop()		{			soundQueue = new ArrayQueue();			soundManager.stop();			notPlaying = true;		}	}}