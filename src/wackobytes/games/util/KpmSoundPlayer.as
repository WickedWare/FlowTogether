package com.kpm.util {	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.TimerEvent;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundTransform;	import flash.utils.Timer;		   	public class KpmSoundPlayer extends EventDispatcher {   		      	private static var instance: KpmSoundPlayer;      	      	public var soundList		: Array;      	public var soundQueue		: Array;      	public var currentSound		: Sound;      	public var lastPlayedIndex	: uint;      	public var free				: Boolean = true;      	public var arrayCounter 	: uint;		public var soundTimer	 	: Timer;		public var musicSound		: KpmSound;		public var pausePoint		: Number = 0;				public var musicChannel 	: SoundChannel;		private var soundChannel 	: SoundChannel;		private var soundTransf		: SoundTransform;				   		public static function getInstance(pForceCreation : Boolean = false): KpmSoundPlayer    		{        	if (pForceCreation) {            	instance = new KpmSoundPlayer();            	instance.soundQueue = new Array();            	instance.soundList = new Array(100);            	instance.arrayCounter = 0;            	instance.currentSound = new Sound();            	instance.soundChannel = new SoundChannel();          	}          		        return instance;       	}       	        	       	       	public function pushSound(pSoundObj : KpmSound, pEvent : String = null, pSoundIndex: String = null)       	{// 			for (var item in soundList)// 				Util.debug(soundList[item], this); 			if(!pSoundObj) 				return; 				       		if(pSoundObj)       		{      		       			soundList[pSoundObj.name] = pSoundObj;       			if(pEvent)       				soundList[pSoundObj.name].eventString = pEvent;       			soundQueue.push(soundList[pSoundObj.name]);       			//Util.debug("pushing " + soundList[pSoundObj.name] + " " + pEvent + " " + (soundQueue.length-1), this);       			       		}       		else if(pSoundIndex)       		{       			soundList[pSoundObj.name] = pSoundObj;       			if(pEvent)       				soundList[pSoundIndex].eventString = pEvent;       			soundQueue.push(soundList[pSoundIndex]);       			Util.debug("trying to push " + pSoundIndex, this);       			       			Util.debug(soundList[pSoundIndex], this);	       		}       		else       			return;       		       	}       	       	       	public function automaticEnQueue(e:Event)       	{       		Util.debug("automaticEnQueue", this);       		playSoundFromQueue(new Event(""));       	}       	       	public function forcePlaySoundFromQueue(pEvent : Boolean = true)       	{       		stopCurrentSound(pEvent);       		playSoundFromQueue(null);       		updateIndex();       		       	}       	       	public function updateIndex()       	{       		lastPlayedIndex = soundQueue.length;       		Util.debug("update index " + lastPlayedIndex, this);       	}       	       	public function playSoundFromQueue(e:Event)       	{		       		       		if(e == null && !free)       		{       			Util.debug("* not free ", this);       			return;       		}       		       		if(arrayCounter == soundQueue.length)       		{       			Util.debug("array counter and soundquee");       			return;       		}       		       		free = false;       		playSound(soundQueue[arrayCounter]);			       		       	if(arrayCounter == soundQueue.length-1)			{				arrayCounter++;				return; 			}						//Util.debug("array counter " + arrayCounter + " " + (soundList.length), this);						if(soundQueue[arrayCounter].duration == 0)			{				//Util.debug(soundChannel, this);				if(soundChannel)					soundChannel.addEventListener(Event.SOUND_COMPLETE, automaticEnQueue, false, 0 , true);				//Util.debug("*enqueuing ", this);			}			else			{				soundTimer = new Timer(soundQueue[arrayCounter].duration);				soundTimer.addEventListener(TimerEvent.TIMER , playSoundFromQueue, false, 0 , true);				soundTimer.start();							}						arrayCounter++;       	}              			public function playSound(pSoundObj: KpmSound, pEvent : String = null, pSoundIndex : String = null,  pPausePoint : Number = 0)		{					//Util.debug("event string is " + pSoundObj.eventString, this);   	           	        if(GameLib.MUTE_ALL)   	        	pSoundObj.volume = 0;   	        if(pEvent)       			pSoundObj.eventString = pEvent;   	           	        var soundString : String;   			if(soundTimer)				soundTimer.stop();						//Util.debug("sound index " + pSoundIndex, this);			if(pSoundIndex != null)   	        	pSoundObj = soundList[pSoundIndex];   	        				if(!pSoundObj) 	{ Util.debug("sound object is null", this);	return; }			   			currentSound = pSoundObj.sound;   			   			Util.debug("sound object " + pSoundObj.sound, this);	   			   			   			if(currentSound)			{				try				{					//Util.debug("playing " + Mute, this);					if(pSoundObj.isMusic)					{						if(!Mute)						{							musicChannel =							currentSound.play(pausePoint,pSoundObj.loop, new SoundTransform(pSoundObj.volume));							musicSound = pSoundObj;						}											}					else					{						Util.debug("*playing " + pSoundObj.name, this);						//Util.debug("*current sound bytes loaded " + currentSound.bytesLoaded, this);						soundChannel = 						currentSound.play(0,pSoundObj.loop, new SoundTransform(pSoundObj.volume));					}										if(soundChannel)					{						Util.debug("adding event " + pSoundObj);						EventManager.addEvent(soundChannel, Event.SOUND_COMPLETE, soundComplete, pSoundObj);					}					else						Util.debug("sound channel is null", this);				}				catch (e : Error)				{					Util.debug("error : could not play", this);					Util.debug(e, this);					if(pSoundObj.eventString!= null)						soundComplete(null, pSoundObj);									}			}			else 				Util.debug("current sound is null " + pSoundObj, this);		}				public function stopSounds(pEvents : Boolean)		{			if(pEvents)				stopCurrentSound();			else			{				if(soundChannel)					soundChannel.stop();			}			if(musicChannel)				musicChannel.stop();		}				public function stopCurrentSound(pEvents : Boolean = true)		{			Util.debug("array counter is " + arrayCounter, this);			Util.debug("free " + free, this);			Util.debug("soundQueue.length " + soundQueue.length, this);						if(soundChannel && arrayCounter > 0 && !free)// && arrayCounter != soundQueue.length-1)			{				soundChannel.stop();								if(pEvents)				{					Util.debug("looping events", this);					for(var i = arrayCounter-1; i < soundQueue.length; i++) {						if(soundQueue[i].eventString) 						{							Util.debug("event " + i + " " + soundQueue[i], this);							soundComplete(null, soundQueue[i]);						}					}				}								free = true;				arrayCounter = lastPlayedIndex;			}					}				public function toggleMute()		{						if(!musicChannel)				return;							///Util.debug("toggling mute" + Mute, this);							if(!Mute)			{				playSound(musicSound, null, null, pausePoint);				Util.debug("music " + musicSound.isMusic, this);			}			else			{				pausePoint = musicChannel.position;				//Util.debug("pausePoint "  + pausePoint, this)				stopSounds(false);				//Util.debug("muting", this);			}		}				public function soundComplete(e : Event, pSound : KpmSound)   		{   			//soundChannel.stop();   			Util.debug("sound player dispatching " + pSound.eventString, this);   			   			if(arrayCounter == soundQueue.length-1)   			{   				Util.debug("setting free", this);   				free = true;   			}   				    			if(pSound && pSound.eventString)   				this.dispatchEvent(new Event(pSound.eventString));   		}   		   		public function get Mute ()   		{   			if(GameLib.driver)   			{   				return GameLib.driver.mute;   			}   			else   			{   				return false;   			}   			   		}   		   		public function getSoundName(pSoundObj) : String   		{   			var candidateString : String = "sounds/";			if(pSoundObj.lang) candidateString += pSoundObj.lang.Text+"/";			if(pSoundObj.game) candidateString += pSoundObj.game.Text+"/";			candidateString += pSoundObj.name;						return candidateString;   		}   	}}		