package com.kpm.games.walkthewalk {  import com.kpm.kpm.BubbleId;  import com.kpm.kpm.EBName;  import com.kpm.kpm.EBStd;  import com.kpm.games.EState;  import com.kpm.games.EGameCharacter;  import com.kpm.util.*;  import flash.media.SoundTransform;  import fl.transitions.Tween;  import fl.transitions.TweenEvent;  import fl.transitions.easing.*;  import flash.display.MovieClip;  import flash.events.Event;  import flash.events.MouseEvent;  import flash.media.Sound;  import flash.media.SoundChannel;  import flash.text.TextField;  import flash.utils.getDefinitionByName;  public class Game3 extends MovieClip {    private var mGameRoad: Road;    private var mGameLevel: GameLevel;    private var mGameLevelSpec: UniformGameLevelSpec;    private var mGameCharacters: Array;    private var mGameCounters: Array;    private var mQuestionMessage: GameMessage;    private var mWelcomeMessage: GameMessage;    private var mStatusMessage: GameMessage;    private var mIP: InteractionPanel;    private var mGameScore: uint;    private var mQuestionStatus: Array;    private var mCurrentRound: uint;    private var mScaleFactor: Number;    private var mGoalNumber : Number;    private var mLatestProperty: String;    private var mGoalProperty: String;    private var mLanguage: String;    private var mMute: Boolean;    private var mMotionComplete: Boolean;    private var mNumGCsMoving: Number;    private var mGCMove: Array;    private const DEFAULT_FREEZE_INTERVAL: Number = 2;    private const MINIMUM_PADDING: Number = 10;    private const BACKGROUND_MUSIC: String = "backgroundMusic";    private const BUILDING_ROAD_MUSIC: String = "buildingroadMusic";    private const DEFAULT_MUSIC: String = BUILDING_ROAD_MUSIC;    private var mMusic: Sound;    private var mMusicChannel: SoundChannel;    //Carlos    private var mData		: GameLib;    private var mBubbleId 	: BubbleId ;    private const LAST_OBJECT1: String = "bus";    private const DEFAULT_ACTIVITY: String = "IdentifyColor";    private const DEFAULT_LEVEL: Number = 0;    private const DEFAULT_NUM_ROUNDS: Number = 2;    private const DEFAULT_LANGUAGE: String = "SPA";    private const DEFAULT_MUTE: Boolean = false;    private const PROB_MSG_FAILURE: Number = 0.2;    private const PROB_MSG_TRYAGAIN: Number = 0.4;    private const PROB_MSG_FEEDBACK: Number = 1.0;    public function Game3(isStandAlone : Boolean) : void    {      if(isStandAlone)          EventManager.addEvent(this, Event.ADDED_TO_STAGE, onInit);    }    public function onInit(e : Event)    {      initGame();      EventManager.removeEvent(this, Event.ADDED_TO_STAGE);    }    public function initGame (pBubble : BubbleId = null, pLanguage: String = DEFAULT_LANGUAGE)    {	  //Carlos	  if(pBubble == null)	  	mBubbleId = new BubbleId(EBName.IdentifyColor, 2);	  else	    mBubbleId = pBubble;	 // pLanguage = "OBI"	  mData = new GameLib(mBubbleId, ELanguage[pLanguage], this);      setupLevel(mBubbleId.Name.Text, mBubbleId.Level-1);	  mData.soundLibrary.createLibrary(ELanguage[pLanguage], EGame.G3, null, mBubbleId.Name);      mData.soundLibrary.addEventListener(GameLib.FEEDBACK_FINISHED, onFeedbackFinished);      //Carlos      setupInteractionPanel(interaction_panel);      setupGCs();      setupRoad(road);      initScore();      mCurrentRound = 0;      mMotionComplete = true;      mLanguage = pLanguage;      //mMute = pMute;      mWelcomeMessage = new GameMessage(mLanguage, GameMessage.MSG_WELCOME);      mWelcomeMessage.writeMessageTo(welcomeText);      //Carlos      mGameRoad.addEventListener(GameLib.RETURN_TO_DRIVER, returnToDriver, false, 0 , true);	  //Carlos      mStatusMessage = mQuestionMessage = null;      mGCMove = new Array();      showCounters(false);      mLatestProperty = mGoalProperty = null;	  //!! Are we using this ??      if(Util.RELEASE)      {      	mWelcomeMessage.addEventListener(GameMessage.MESSAGE_SOUND_PLAYED, startGame, false, 0 , true);      	mWelcomeMessage.playSound();      }      else      	startGame();    }    private function initScore() {      mGameScore = 0;      mQuestionStatus = new Array();    }    private function startGame(event: Event = null) {	  mWelcomeMessage.removeEventListener(GameMessage.MESSAGE_SOUND_PLAYED, startGame);      var ClassReference: Class = getDefinitionByName(Character.PACKAGE_NAME + DEFAULT_MUSIC) as Class;      mMusic = new ClassReference();        //volume was 0.5 before      if(!Data.SoundPlayer.Mute)          mMusicChannel = mMusic.play(0, 500, new SoundTransform(0.3));	  Data.updateGoal();      hideRoad();        startRound();    }    private function startRound(event: Event = null) {	  reSetupCounters();      showCounters(true);      //setGoalCounter();      if(mGameLevelSpec.LevelType != UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER)        showGCs(true);      moveGCsOnStage();      mQuestionStatus[mCurrentRound] = true;      //Carlos	  setupGoal();    }    /*Carlos    	Compute number of Goals and number of Objects    */    private function setupGoal()    {      var numObjects, numGoals : uint;      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER ||        mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_COUNTING)      {      	numObjects = mGameCounters.length;      	numGoals = 1;      	Data.CurrentGoal =  mGoalNumber;      }      else      {      	numGoals = 0;      	numObjects = mGameCharacters[mCurrentRound].length;      	for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++)        if(mGameCharacters[mCurrentRound][i].Goal){          numGoals++;        }      }	  Data.startTask(numObjects, numGoals);    }    public function mute(pMute: Boolean = false){      mMute = pMute;      if(mMusicChannel)      {	      if(Data.SoundPlayer.Mute)	        mMusicChannel.stop();	      else	        mMusicChannel = mMusic.play(0, 500, new SoundTransform(0.5));      }    }    private function setupLevel(pActivity: String, pLevel: Number){      var vGameLevelFactory = new GameLevelFactory();      mGameLevelSpec = vGameLevelFactory.createUniformGameLevelSpec(pActivity, pLevel, Data.gameGoal.totalTasks);      mGameLevel = vGameLevelFactory.createUniformGameLevelBySpec(mGameLevelSpec);    }    private function setupInteractionPanel(pPanel: MovieClip){      mIP = new InteractionPanel(pPanel);      setupCounters();      mIP.addEventListener(InteractionPanel.MOTION_TO_STAGE_COMPLETE, poseQuestion, false, 0 , true);    }    private function setupGCs(){      mGameCharacters = GameCharacterFactory.createGameCharacters(mGameLevel);	  addGCs();      if(mGameLevelSpec.LevelType != UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER){        for(var i: Number = 0; i < mGameCharacters.length; i++)          if(mGameLevelSpec.Placement == UniformGameLevelSpec.PLACEMENT_RANDOM)            mIP.placeCharactersRandom(mGameCharacters[i]);          else            mIP.placeCharactersLinear(mGameCharacters[i]);      }      else {        for(i = 0; i < mGameCharacters.length; i++)          if(mGameLevelSpec.Placement == UniformGameLevelSpec.PLACEMENT_RANDOM)            mIP.placeCharactersRandom(mGameCharacters[i], 0, 0);          else            mIP.placeCharactersLinear(mGameCharacters[i], 0, 0);      }    }    private function setupRoad(pRoad: MovieClip){      mGameRoad = new Road(pRoad);      this.addChild(mGameRoad);      var vBoxes: Array = new Array();      var k: Number = 0;      for(var i: Number = 0; i < mGameCharacters.length; i++)        for(var j: Number = 0; j < mGameCharacters[i].length; j++)          if(mGameCharacters[i][j].Goal){            vBoxes[k] = (mGameCharacters[i][j].width > mGameCharacters[i][j].height) ?                         mGameCharacters[i][j].width : mGameCharacters[i][j].height;            k++;          }      mGameRoad.createAnchors(vBoxes, MINIMUM_PADDING);      mScaleFactor = mGameRoad.ScaleFactor;    }    private function moveGC(event: TweenEvent, pGC_Id: Number, pDest: Point2D){      mGCMove[pGC_Id] = mGameCharacters[mCurrentRound][pGC_Id].gotoDestination(pDest, mScaleFactor);      EventManager.addEvent(mGCMove[pGC_Id], GCMovement.GC_MOTION_FINISH, stopGC, pGC_Id);    }    private function stopGC(event: Event, pGC_Id: Number){      mNumGCsMoving--;      mGCMove[pGC_Id].removeEventListener(GCMovement.GC_MOTION_FINISH, stopGC);      this.removeChild(mGameCharacters[mCurrentRound][pGC_Id]);      mGameRoad.addPed(mGameCharacters[mCurrentRound][pGC_Id]);      if(mNumGCsMoving <= 0){        mMotionComplete = true;        mCurrentRound++;        if(mCurrentRound < mGameLevel.NumRounds)          startRound();        else        {          //Carlos          GameRoad.startEndSequence(LAST_OBJECT1, Math.floor(1 + Math.random() * 2));          this.dispatchEvent(new Event(GameLib.BUBBLE_FINISHED));        }      }    }    private function clickCounter (event: MouseEvent, pCounterId: Number) {	  //Carlos      //if((! SoundComplete) || (! MotionComplete))      if(! MotionComplete)        return;	  if(mStatusMessage)			mStatusMessage.stopSound();      mData.soundLibrary.forceStop();        CursorManager.setIdleCursor(null);	  //Carlos      if(mGameCounters[pCounterId].Value == mGoalNumber){		hideNonGoalCounters();        hideNonGoalGCs();        disableCounters();		mLatestProperty = mGoalNumber+"";        moveGoalGCsToRoad();        if(mQuestionStatus[mCurrentRound])          mGameScore++;		reportSuccess();      }      else {   	    mQuestionStatus[mCurrentRound] = false;        mGameCounters[pCounterId].visible = false;        mLatestProperty = mGameCounters[pCounterId].Value+"";        reportFailure(pCounterId);      }    }    private function clickGC (event: MouseEvent, pGC_Id: Number) {	  //Carlos      //if((! SoundComplete) || (! MotionComplete))      if(! MotionComplete)        return;	  if(mStatusMessage)			mStatusMessage.stopSound();        mData.soundLibrary.forceStop();        CursorManager.setIdleCursor(null);	  //Carlos	  if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_COLOR)	  	mLatestProperty = mGameCharacters[mCurrentRound][pGC_Id].ColorStr;	  else if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_SIZE)	  	mLatestProperty = mGameCharacters[mCurrentRound][pGC_Id].SizeStr;	  mGoalProperty = getColorSizeGoal();	  Util.debug("define game goal property " + mGoalProperty);      if(mGameCharacters[mCurrentRound][pGC_Id].Goal){        hideNonGoalGCs();        moveGoalGCsToRoad();        if(mQuestionStatus[mCurrentRound])          mGameScore++;          for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++){            EventManager.removeEvent(mGameCharacters[mCurrentRound][i], MouseEvent.CLICK);            mGameCharacters[mCurrentRound][i].buttonMode = false;            //Carlos            if(GameLib.driver) 	CursorManager.removeOverEvents(mGameCharacters[mCurrentRound][i]);          }          reportSuccess();        }        else {		  if(GameLib.driver) CursorManager.removeOverEvents(mGameCharacters[mCurrentRound][pGC_Id]);          EventManager.removeEvent(mGameCharacters[mCurrentRound][pGC_Id], MouseEvent.CLICK);          mQuestionStatus[mCurrentRound] = false;          mGameCharacters[mCurrentRound][pGC_Id].visible = false;          reportFailure(pGC_Id);        }    }    private function reportSuccess() {	  //Carlos	  Data.stopTaskTimer();	  Data.recordMove(GameLib.TASK_SUCCESS, mGoalProperty);	  //Carlos//	  if(mCurrentRound == mGameLevel.NumRounds-1)//      {//      	//Carlos//		  /*//      	if(mQuestionMessage)//			mQuestionMessage.stopSound();//		//Carlos////		  if(mStatusMessage)//	      {//	          mStatusMessage.stopSound();//	          mStatusMessage.addEventListener(GameMessage.MESSAGE_SOUND_PLAYED, poseQuestion, false, 0 , true);//	      }//		  *///	  mStatusMessage = new GameMessage(mLanguage, GameMessage.MSG_SUCCESS);	  mStatusMessage.writeMessageTo(statusText);	  mData.soundLibrary.forceStop();	  mData.soundLibrary.playLibSound(ESoundType.Feedback, EState.GOOD_MOVE, mData.Language);//		//mStatusMessage.playSound();//////      }//      else//      {//		  mData.soundLibrary.playLibSound(ESoundType.Feedback, EState.GOOD_TASK, mData.Language);//      }      //var pAns: Object = new Object();      //getLastAnswer(pAns);      //trace(pAns.answer);      //trace(pAns.goal);    }    private function reportFailure(pObjectId: Number) {	  //Carlos	  Util.debug("goal " + mGoalProperty + " clicked " + mLatestProperty, this);	  Data.recordMove(GameLib.TASK_FAILURE, mGoalProperty, mLatestProperty);	  if(mQuestionMessage)			mQuestionMessage.stopSound();      if(mStatusMessage)      {          mStatusMessage.stopSound();          mStatusMessage.addEventListener(GameMessage.MESSAGE_SOUND_PLAYED, poseQuestion, false, 0 , true);      }	  //Carlos      var vReportDecision: Number = Math.random();      if(vReportDecision < PROB_MSG_FAILURE)        mStatusMessage = new GameMessage(mLanguage, GameMessage.MSG_FAILURE);      else if(vReportDecision < PROB_MSG_TRYAGAIN)        mStatusMessage = new GameMessage(mLanguage, GameMessage.MSG_TRYAGAIN);      else {        var vQualsOfClicked: Array = generateQualsOfClicked(pObjectId);        mStatusMessage = new GameMessage(mLanguage, GameMessage.MSG_FEEDBACK,                                         vQualsOfClicked, mGameLevelSpec);      }     // if(Data.gameGoal.attemptCounter < 2 || Math.random() > 0.5)      //	mStatusMessage.addEventListener(GameMessage.MESSAGE_SOUND_PLAYED, repeatQuestion, false, 0 , true);      mStatusMessage.writeMessageTo(statusText);	  Util.debug("Game3.reportFailure");	  //var clicked = mStatusMessage.getGCQualitiesList("", "").split("_");	  //Util.printArray(vQualsOfClicked);	  mData.soundLibrary.playLibSound(ESoundType.Feedback, EState.BAD_MOVE);	  Util.debug("mGoalProperty " + mGoalProperty);	  Util.debug("mLatestProperty " + mLatestProperty );	  if(mData.gameGoal.quality == EGoal.NUMBER || mData.gameGoal.quality == EGoal.COUNT)		  mData.soundLibrary.playLibSound(ESoundType.FeedbackClick, mLatestProperty, mData.Language, null, null, null, GameLib.FEEDBACK_FINISHED);	  mLatestProperty = (mLatestProperty.substr(0,1).toUpperCase() + (mLatestProperty.substr(1,mLatestProperty.length)).toLowerCase());	  Util.debug("mLatestProperty " + mLatestProperty);	  if(mData.gameGoal.quality == EGoal.COLOR || mData.gameGoal.quality == EGoal.SIZE)		  if(Math.random() < 1)			  mData.soundLibrary.playLibSound(ESoundType.FeedbackClick, mLatestProperty, mData.Language, null, null, null, GameLib.FEEDBACK_FINISHED);		  else			  mData.soundLibrary.playLibSound(ESoundType.FeedbackClick, mLatestProperty, mData.Language, EGame.G3, EGameCharacter.Animal, mData.Bubble.Name, GameLib.FEEDBACK_FINISHED);        //mStatusMessage.playSound();      //var pAns: Object = new Object();      //getLastAnswer(pAns);      //trace(pAns.answer);      //trace(pAns.goal);    }	public function onFeedbackFinished(e : Event){        mData.soundLibrary.playLibSound(ESoundType.Feedback, "Silence1");        poseQuestion(e);	}    // Yan    public function getLastAnswer(pAnswerObj: Object){      pAnswerObj.answer = mLatestProperty;      pAnswerObj.goal = mGoalProperty;    }    public function repeatQuestion(event: Event = null){	  if(mStatusMessage)	  	mStatusMessage.removeEventListener(GameMessage.MESSAGE_SOUND_PLAYED, repeatQuestion);      Data.soundLibrary.repeatLastInstruction();      // mQuestionMessage.playSound();    }    private function poseQuestion (event: Event = null) {      mMotionComplete = true;      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER){        var vQuals: Array = new Array();        for(var i: Number = 0; i < CharacterQuality.NUM_QUALITIES; i++)          vQuals[i] = new Array();        vQuals[CharacterQuality.MULTIPLICITY][0] = mGameLevel.NumGoalObjects[mCurrentRound];        mQuestionMessage = new GameMessage(mLanguage, GameMessage.MSG_QUESTION,                                           vQuals, mGameLevelSpec);      }      else        mQuestionMessage = new GameMessage(mLanguage, GameMessage.MSG_QUESTION,                                           mGameLevel.Goals[mCurrentRound], mGameLevelSpec);      mQuestionMessage.writeMessageTo(questionText);	  Util.debug("Game3.poseQuestion");	  var attribute = mQuestionMessage.getGCQualitiesList("", "-").split("_");	  if (mBubbleId.Name.Standard == EBStd.Numbers_Count)	  {		  mData.soundLibrary.playLibSound(ESoundType.Instruction, attribute, mData.Language, EGame.G3, null, EBStd.Numbers_Count);	  }	  else if (mBubbleId.Name.Standard == EBStd.Numbers_Subset)	  {		  mData.soundLibrary.playLibSound(ESoundType.Instruction, attribute, mData.Language, EGame.G3, null, EBStd.Numbers_Subset);	  }	  else if(mBubbleId.Name.Standard == EBStd.Numbers_Identify)	  {		  mData.soundLibrary.playLibSound(ESoundType.InstructionClick, attribute, mData.Language, EGame.G3, null, EBStd.Numbers_Identify);	  }	  else	  {		  attribute = getColorSizeGoal();		  attribute = (attribute.substr(0,1).toUpperCase() + (attribute.substr(1,attribute.length)).toLowerCase());			  mData.soundLibrary.playLibSound(ESoundType.InstructionClick, attribute, mData.Language, EGame.G3, null, mBubbleId.Name);	  }      //mQuestionMessage.playSound();    }	private function getColorSizeGoal()	{		for(var j: Number = 0; j < mGameCharacters[mCurrentRound].length; j++)			if(mGameCharacters[mCurrentRound][j].Goal){				if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_COLOR)				{					return mGameCharacters[mCurrentRound][j].ColorStr;				}				else if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_SIZE)				{					return mGameCharacters[mCurrentRound][j].SizeStr;				}			}	}    public function get SoundComplete (): Boolean {      if((mStatusMessage != null && (! mStatusMessage.SoundComplete)) ||         (mQuestionMessage != null && (! mQuestionMessage.SoundComplete)) ||         (mWelcomeMessage != null && (! mWelcomeMessage.SoundComplete)))        return false;      return true;    }    public function get MotionComplete (): Boolean {      return mMotionComplete;    }    private function moveGoalGCsToRoad() {      mMotionComplete = false;      mNumGCsMoving = mGameLevel.NumGoalObjects[mCurrentRound];      for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++){        if(mGameCharacters[mCurrentRound][i].Goal){          var vDest: Point2D = mGameRoad.NextAnchor;          if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER){            mGameCharacters[mCurrentRound][i].visible = true;            var vTweenStay: Tween = mGameCharacters[mCurrentRound][i].stayInPlace(DEFAULT_FREEZE_INTERVAL);            EventManager.addEvent(vTweenStay, TweenEvent.MOTION_FINISH, moveGC, i, vDest);          }          else            moveGC(null, i, vDest);        }      }    }    private function moveGCsOnStage() {      mMotionComplete = false;      if(mGameLevelSpec.LevelType != UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER)        mIP.moveCharactersToIP(mGameCharacters[mCurrentRound]);      else        mIP.moveCharactersToIP(mGameCharacters[mCurrentRound], 0, 0, 0);    }    private function showCounters (pShowFlag: Boolean) {      for(var i: Number = 0; i < mGameCounters.length; i++)        if(mGameCounters[i] != null)          mGameCounters[i].visible = pShowFlag;    }    private function hideNonGoalCounters () {      for(var i: Number = 0; i < mGameCounters.length; i++)        if(mGameCounters[i] != null && (! mGameCounters[i].Goal))          mGameCounters[i].visible = false;    }    private function addCounterEvents () {      for(var i: Number = 0; i < mGameCounters.length; i++){        if(mGameCounters[i] != null){          Util.debug("adding counter events ???")          EventManager.addEvent(mGameCounters[i], MouseEvent.CLICK, clickCounter, i);          mGameCounters[i].buttonMode = true;          if(mBubbleId.Name.Standard != EBStd.DataMeasurements)          if(mGameCounters[i].CounterType != UniformGameLevelSpec.COUNTING_5FRAMES || this.mBubbleId.Level == 1)          {            var emptyBox : MovieClip = Util.addButtonBox(mGameCounters[i], new EmptyBox())            mGameCounters[i].addChild(emptyBox);            mGameCounters[i].setChildIndex(emptyBox, 0);          }            //Carlos          if(GameLib.driver) CursorManager.addOverEvents(mGameCounters[i]);        }      }    }    private function disableCounters () {      for(var i: Number = 0; i < mGameCounters.length; i++){        if(mGameCounters[i] != null){          EventManager.removeEvent(mGameCounters[i], MouseEvent.CLICK);          mGameCounters[i].buttonMode = false;          //Carlos          if(GameLib.driver) CursorManager.addOverEvents(mGameCounters[i]);        }      }    }    private function setupCounters () { // Requires a ready GameLevelSpec and InteractionPanel//	  var enumberArray = GameData.generateENumbers(1, GameLevel.MIDDLE_VALUE, GameLevel.MAX_TOTALOBJECTS);//	  var goal : ENumber = Util.getRandomFrom(enumberArray) as ENumber;	  Util.printArray(mGameLevel.NumGoalObjects);	  mGoalNumber =   mGameLevel.NumGoalObjects[mCurrentRound];	  Util.debug("setting counters " + mGoalNumber + " " + mCurrentRound);      mGameCounters = GameCounter.createCounters(mGoalNumber, mGameLevelSpec);      if(mGameCounters == null) return;      mIP.placeCounters(mGameCounters);      addCounterEvents();    }    private function reSetupCounters () { // Needed to regenerate counters if different type is to be used in another round      for(var i: Number = 0; i < mGameCounters.length; i++)        Util.removeChild(mGameCounters[i]);      setupCounters();    }    private function addGCs () {      for(var i: Number = 0; i < mGameCharacters.length; i++){        for(var j: Number = 0; j < mGameCharacters[i].length; j++){          if(!mGameCharacters[i][j])          	throw new Error("no gc for " + i + " " + j);          mGameCharacters[i][j].visible = false;          this.addChild(mGameCharacters[i][j]);        }      }    }    private function hideNonGoalGCs (removeGCs: Boolean = true) {      for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++)        if(! mGameCharacters[mCurrentRound][i].Goal){          mGameCharacters[mCurrentRound][i].visible = false;          if(removeGCs) this.removeChild(mGameCharacters[mCurrentRound][i]);        }    }    private function showGCs(pShowFlag: Boolean){      for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++){        mGameCharacters[mCurrentRound][i].visible = pShowFlag;        if(pShowFlag && mGameLevelSpec.CountingMethod == UniformGameLevelSpec.COUNTING_NONE){          EventManager.addEvent(mGameCharacters[mCurrentRound][i], MouseEvent.CLICK, clickGC, i);          mGameCharacters[mCurrentRound][i].buttonMode = true;            var emptyBox : MovieClip = Util.addButtonBox(mGameCharacters[mCurrentRound][i], new EmptyBox());            Util.debug("Game3.showGCs  " + mGameCharacters[mCurrentRound][i].height + " " + mGameCharacters[mCurrentRound][i].width);            mGameCharacters[mCurrentRound][i].addChild(emptyBox);            //mGameCharacters[mCurrentRound][i].setChildIndex(emptyBox, 0);          //Carlos          if(GameLib.driver) CursorManager.addOverEvents(mGameCharacters[mCurrentRound][i]);        }      }    }    private function hideRoad () {        Util.debug("Game3.hideROad");       Util.debug(road);      road.visible = false;        Util.debug(road.visible);    }    private function generateQualsOfClicked(pObjectId: Number): Array {      var vQuals: Array = new Array();      for(var i: Number = 0; i < CharacterQuality.NUM_QUALITIES; i++)        vQuals[i] = new Array();      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_NUMBER){        vQuals[CharacterQuality.MULTIPLICITY][0] = mGameCounters[pObjectId].Value;        return vQuals;      }      for(i = 0; i < mGameLevel.Goals[mCurrentRound].length; i++){        if(mGameLevel.Goals[mCurrentRound][i].length > 0 &&           (mGameLevelSpec.LevelType != UniformGameLevelSpec.LEVELTYPE_COUNTING || i != 0))          vQuals[i][0] = mGameLevel.Goals[mCurrentRound][i][0];      }      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_COUNTING)        vQuals[CharacterQuality.MULTIPLICITY][0] = mGameCounters[pObjectId].Value;      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_COLOR)        vQuals[CharacterQuality.COLOR][0] = mGameCharacters[mCurrentRound][pObjectId].getColorVal();      if(mGameLevelSpec.LevelType == UniformGameLevelSpec.LEVELTYPE_IDENTIFY_SIZE)        vQuals[CharacterQuality.SIZE][0] = mGameCharacters[mCurrentRound][pObjectId].getSizeVal();      return vQuals;    }    /*Carlos */    public function onRemove (e : Event)  	{  		//removeGCEvents();		stopMessages();		if(mGameRoad)		{			mGameRoad.stopEndingSound();			mGameRoad.removeEventListener(GameLib.RETURN_TO_DRIVER, returnToDriver);		}		if(mMusicChannel)			mMusicChannel.stop();		if(mIP)			mIP.removeEventListener(InteractionPanel.MOTION_TO_STAGE_COMPLETE, poseQuestion);		removeEventListener (Event.REMOVED_FROM_STAGE, onRemove);	}	function removeGCEvents()	{		if(mGameCharacters[mCurrentRound])		for(var i: Number = 0; i < mGameCharacters[mCurrentRound].length; i++){			Util.debug("removing gc events " + mGCMove[i]);			if(mGCMove[i])				EventManager.removeEvent(mGCMove[i],GCMovement.GC_MOTION_FINISH);		}	}	public function stopMessages()	{        mData.soundLibrary.forceStop();		if(mStatusMessage)			mStatusMessage.stopSound();		if(mQuestionMessage)			mQuestionMessage.stopSound();		if(mWelcomeMessage)			mWelcomeMessage.stopSound();	}	public function returnToDriver(e : Event)	{		Util.debug("return to driver game3",this);		Data.dispatchEvent(new Event(GameLib.RETURN_TO_DRIVER));	}	public function get Data() 		: GameLib	{ return (mData as GameLib);}	public function get Name()		: EGame		{ return EGame.G3;}	public function get GameRoad()	: Road		{ return mGameRoad;}	/* Carlos */  }}