package com.kpm.games.walkthewalk {  import flash.display.MovieClip;  import flash.events.Event;  import flash.events.EventDispatcher;  import fl.transitions.Tween;  import fl.transitions.TweenEvent;  import fl.transitions.easing.*;  import com.greensock.*;  import com.greensock.easing.*;  public class GCMovement extends EventDispatcher {    private var mSpeedX: Number;    private var mSpeedY: Number;    private var mSpeedRot: Number;    private var mSpeedScale: Number;    private var mTravelTime: Number;    private var mSpeed: Number;    private var mDestX: Number;    private var mDestY: Number;    private var mDestScaleX: Number;    private var mDestScaleY: Number;    private var mTweenX: Tween;    private var mTweenY: Tween;    private var mTweenScaleX: Tween;    private var mTweenScaleY: Tween;    private var mTweenStay: Tween;    private var mNumTweens: Number;    static private const MAX_TWEENS: Number = 4;    static public const GC_MOTION_FINISH: String = "GC_MOTION_FINISH";    public function GCMovement () {}    public function get Speed (): Number {      return mSpeed;    }    public function set Speed (pSpeed: Number) {      mSpeed = pSpeed;    }    public function get TravelTime (): Number {      return mTravelTime;    }    public function set TravelTime (pTravelTime: Number) {      mTravelTime = pTravelTime/12;    }    public function setupMovement(pOriginX: Number, pOriginY: Number,                                  pDestX: Number, pDestY: Number,                                  pOriginScale: Number, pDestScale: Number){      mDestX = pDestX;      mDestY = pDestY;      mDestScaleX = mDestScaleY = pDestScale;	  trace("GCMovement.setupMovement " + pOriginX + " " + pOriginY + " " + pDestX + " " + pDestY);	        TravelTime = computeDistance(pOriginX, pOriginY, pDestX, pDestY) / mSpeed;	        mSpeedX = (pDestX - pOriginX) / mTravelTime;      mSpeedY = (pDestY - pOriginY) / mTravelTime;      mSpeedScale = (pDestScale - pOriginScale) / mTravelTime;    }    static public function computeDistance(x1: Number, y1: Number, x2: Number, y2: Number): Number {      return Math.sqrt( (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) );    }    private function tweenDone(){//      mNumTweens++;//      if(mNumTweens >= MAX_TWEENS)        dispatchEvent(new Event(GC_MOTION_FINISH));    }    public function stay(pMovieClip: MovieClip, pDelay: Number): Tween {      return (mTweenStay = new Tween(pMovieClip, "x", None.easeNone,                                     pMovieClip.x, pMovieClip.x, pDelay, true));    }    public function move(pMovieClip: MovieClip, isJump : Boolean = false ) {		if (!isJump){		  pMovieClip.rotation = 180 * Math.atan2(mDestY - pMovieClip.y,												 mDestX - pMovieClip.x) / Math.PI - 180;												 		  trace("rotation for moving " + pMovieClip.rotation)												 		  if(pMovieClip.rotation < -91 ||			 pMovieClip.rotation > 90){			pMovieClip.scaleY *= -1;			mDestScaleY *= -1;		  }		}	  trace("GCMovement.move " + mDestX + " " + mDestY + " " + mTravelTime);	        mNumTweens = 0;//      mTweenX = new Tween(pMovieClip, "x", None.easeNone, pMovieClip.x, mDestX, mTravelTime, false);//      mTweenY = new Tween(pMovieClip, "y", None.easeNone, pMovieClip.y, mDestY, mTravelTime, false);//      mTweenScaleX = new Tween(pMovieClip, "scaleX", None.easeNone, pMovieClip.scaleX, mDestScaleX, mTravelTime, false);//      mTweenScaleY = new Tween(pMovieClip, "scaleY", None.easeNone, pMovieClip.scaleY, mDestScaleY, mTravelTime, false);////      mTweenX.addEventListener(TweenEvent.MOTION_FINISH, tweenDone);//      mTweenY.addEventListener(TweenEvent.MOTION_FINISH, tweenDone);//      mTweenScaleX.addEventListener(TweenEvent.MOTION_FINISH, tweenDone);//      mTweenScaleY.addEventListener(TweenEvent.MOTION_FINISH, tweenDone);		TweenLite.to(pMovieClip, mTravelTime, {scaleX:mDestScaleX, scaleY:mDestScaleY, x:mDestX, y:mDestY, onComplete:tweenDone, ease:Linear.easeNone});	    }  }}