package com.kpm.games.game4{	import com.kpm.util.Point2D;	import com.kpm.util.Util;	import flash.display.MovieClip;		//Logic board and movieclips for 	public class Game4Platforms	{		public static const TILE_EMPTY		: int = -1;		public static const TILE_TARGET		: int = 0;		public static const TILE_PLAYER		: int = 100;			private var mNumRows 	: uint;		private var mNumCols 	: uint;		public var  Offset 		: Point2D;		public var playersBoard	: Array;				//Movies are stored to give the position in pixels of every coordinate		public var platforms_mc 		: Array;						public function Game4Platforms()		{			mNumRows = 3;			mNumCols = 10;						initPlayersBoard();			initMovies();		}				//Empty all characters from the Board		public function initPlayersBoard()		{				playersBoard = new Array(NumRows);			for (var i=0; i < NumRows; i++) {				playersBoard[i] = new Array(NumCols);				for (var j=0 ; j < NumCols; j++)					playersBoard[i][j] = TILE_EMPTY;			}		}		//initialize movieClips for platforms		public function initMovies()		{				platforms_mc = new Array(NumRows);		}				//add a movieClip for a platform		public function addPlatform(pMovie : MovieClip, pRow : int)		{				Util.debug("adding platform " + pMovie);			platforms_mc[pRow] = pMovie;		}				public function addCharacter(pGC : Character, pCoord : Point2D)		{			Util.debug("adding " + pGC + " at " + pCoord.y + " " + pCoord.x);			playersBoard[pCoord.y][pCoord.x] = pGC;		}								//Given a coordinate, it gives the place in x,y relative to the top (pixels)		public function coordsToPixels(pCoord : Point2D) : Point2D		{						Util.debug("GameBoard.coordsToPixel " + pCoord.x + " " + pCoord.y + " " + Util.getGlobalCoordinates(platforms_mc[pCoord.y]["anchor"+(pCoord.x+1)]));			return Util.getGlobalCoordinates(platforms_mc[pCoord.y]["anchor"+(pCoord.x+1)]);						//return new Point2D(platform["pos"+pCoord.x].x + platform.x, platform["pos"+pCoord.x].y + platform.y);			}		 		 		//$Get a random empty place, or the next empty place if col and level are defined 		//if a row is given, the function looks for the next empty space (looking on the right hand side) 		//level : -1 means random level 		//col : -1 means random col 		public function getRandomEmptyPlace(pRow : int, pCol : int) : Point2D 		{ 			var a, l; 			 			if(pCol == -1)	a = Util.getRandBtw(0, NumCols-1); 			else 				a = pCol 				 			if(pRow == -1)	l = Util.getRandBtw(0, NumRows-1); 			else				l = pRow; 				 			//var i=0; 			 			do  			{ 				//trace( " level " + l + " col " + a) 				if(playersBoard[l][a] == TILE_EMPTY) 				{ 					Util.debug("random place " + a + " " + l); 					return new Point2D(a,l); 				} 				else  				{  					a = (a+1)%(NumCols); 					 					if(a == 0) 						l = (l+1)%NumRows; 				} 				 				//i++; 				 				//trace("trying random place " + i + playersBoard[l][a]); 			}			//while(playersBoard[l][a] == TILE_EMPTY && i < NumCols*NumRows);			while(playersBoard[l][a] != TILE_EMPTY); 						return new Point2D(a,l); 			 		}		//Este método retorna un random empty place de alguno de los lados: izquierdo o derecho		public function getRandomEmptyPlaceBySide(side : String) {			var posx, posy : int;            Util.debug("Game4Platform.getRandomEmptyPlacebySide");			do {								posx = (side == "left") ? Util.getRandBtw(0, 4) : Util.getRandBtw(5, 9);				posy = Util.getRandBtw(0, 2);                Util.debug("pos(x,y) "+ posx + " " + posy)			}			while(playersBoard[posy][posx] != TILE_EMPTY);			return new Point2D(posx,posy);		}		//Este método retorna un random empty place de alguno de los lados: izquierdo o derecho		public function getRandomEmptyPlaceByBranch(branch : int) {			var posx: int;			do {								posx = Util.getRandBtw(0, 9);			}			while(playersBoard[branch][posx] != TILE_EMPTY);			return new Point2D(posx,branch);		}		public function get NumRows() : uint   {	return mNumRows;	}		public function get NumCols() : uint   {	return mNumCols;	}	}}