package com.kpm.games.game4 {  import com.kpm.util.Point2D;  import com.kpm.util.Util;    import flash.display.MovieClip;  import flash.events.Event;  import flash.geom.ColorTransform;  import flash.utils.getDefinitionByName;  import flash.utils.getTimer;    public class Character extends MovieClip {    //private const CHARACTER_SIZE = 180;	private var mCoord : Point2D;	    private var mKind: Number;    private var mSize: Number;    private var mNumber: Number;    protected var mColor: Number;        private var mOrder : Number;    protected var mMovie: MovieClip;        private var mDragging 			: Boolean = false;    	public var mHoldPosition 		: Point2D;	public var dragTimer			: Number;	    static const PACKAGE_NAME: String = "com.kpm.games.game4";    public function Character () {      mColor = 0;      mSize = 0;      mNumber = 1;      mKind = -1; // Uninitialized    }    public function set Kind(pKind: Number) {      if(mKind >= 0)        this.removeChild(mMovie);      mKind = pKind;      var ClassReference: Class = getDefinitionByName(CharQual.SPECIES_NAMES[pKind]) as Class;      this.addChild((mMovie = new ClassReference()));      //var vAspectRatio: Number = CHARACTER_SIZE / width;      //width = CHARACTER_SIZE;      //height *= vAspectRatio;      //Size = mSize;      //Color = mColor;	      }        public function set Movie(pName : String)    {    	if(mMovie != null)			removeChild(mMovie);				      var ClassReference: Class = getDefinitionByName(pName) as Class;      this.addChild((mMovie = new ClassReference()));    }        //Add or replace an additional movie (for example to add a tail to a monkey)    public function addMovie(pName : String, pReplace : Boolean)    {      if(pReplace)      	Movie = pName;      else      {      	var ClassReference: Class = getDefinitionByName(pName) as Class;      	this.addChild((new ClassReference()));      }    }	    public function set Size(pSize: Number) {      mSize = pSize;      trace("scale : " + scaleX + " " + scaleY + " " + pSize)            scaleX *= CharQual.SIZE_VALUES[pSize];      scaleY *= CharQual.SIZE_VALUES[pSize];            trace("scale : " + scaleX + " " + scaleY)    }    public function set Color(pColor: Number) {      mColor = pColor;      var vColor: Object = CharQual.COLOR_VALUES[pColor];      mMovie.transform.colorTransform = new ColorTransform(vColor.ra, vColor.ga, vColor.ba, vColor.aa,                                                           vColor.rb, vColor.gb, vColor.bb, vColor.ab);    }        public function addBrightness(pBrightness: Number) {		var color:ColorTransform = mMovie.transform.colorTransform;				color.redOffset   += pBrightness;		color.greenOffset += pBrightness;		color.blueOffset  += pBrightness;		mMovie.transform.colorTransform = color;           }            public function set Multiplicity(pNumber: Number) {      mNumber = pNumber; // Not much else now, because pNumber = 1    }    public function get SizeStr(): String {      return CharQual.SIZE_NAMES[mSize];    }	    public function get KindStr(): String {      return CharQual.SPECIES_NAMES[mKind];    }	    public function get ColorStr(): String {      return CharQual.COLOR_NAMES[mColor];    }	    public function get NumberStr(): String {      return CharQual.NUMBER_NAMES[mNumber];    }	    public function getSizeVal(): Number {      return mSize;    }	    public function getKindVal(): Number {      return mKind;    }	    public function getColorVal(): Number {      return mColor;    }    public function getNumberVal(): Number {      return mNumber;    }	public function set Coord(pPosition:Point2D):void {	       mCoord = pPosition;	}		public function get Coord():Point2D {	       return mCoord;	}		public function set PixelPosition(pPosition : Point2D)	{		x = pPosition.x ;		y = pPosition.y ;	}	public function animate(pLabel : String, pNumAnims : Number = 0)	{				if(pNumAnims > 1)			pLabel = pLabel + Util.getRandBtw(1,pNumAnims);				Util.debug("will play " + pLabel);		mMovie.gotoAndPlay(pLabel);				if(typeof(mMovie.inside) != "undefined")        	mMovie.inside.gotoAndPlay(pLabel);		}	    public function walk (event: Event = null) {      mMovie.gotoAndPlay("moveLeft");    }    public function rest (event: Event = null) {      mMovie.gotoAndStop("idle1");    }    	public function clone(pMovie : MovieClip)	{		x 			= pMovie.x;		y 			= pMovie.y;		scaleX 		= pMovie.scaleX;		scaleY 		= pMovie.scaleY;		rotation	= pMovie.rotation;			alpha 		= pMovie.alpha		transform   = pMovie.transform;	}		public function drag() 	{		if(!mDragging)		{			mDragging = true;			//dropShadow(true);			mHoldPosition = new Point2D(x, y);			dragTimer = getTimer();			mMovie.startDrag();		}	}	public function drop()	{		//Util.debug("dropping", this);				if(getTimer() - dragTimer < 500 || !mDragging)			return;						mDragging = false;		mMovie.stopDrag();			}		public function returnToHoldPosition()	{		x = mHoldPosition.x;						y = mHoldPosition.y;	}			public function get Dragging() : Boolean	{		return mDragging;	}  }}