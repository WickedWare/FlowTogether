package com.kpm.games.game4 {  import com.kpm.util.EGoal;  import com.kpm.util.Goal;  import com.kpm.util.Util;  import com.kpm.util.ENumber;    import flash.display.MovieClip;  import flash.events.Event;  import flash.events.EventDispatcher;  import flash.media.Sound;  import flash.media.SoundChannel;  import flash.text.TextField;  import flash.utils.getDefinitionByName;    public class Game4Message extends EventDispatcher {            private var mLanguage: String;    private var mText: String;		private var mMessageType: Number;    private var mSoundArray: Array;    private var mSoundChannel: SoundChannel;    private var mCurrentSound: Number;    private var mSoundComplete: Boolean;    static public const MESSAGE_SOUND_PLAYED: String = "MESSAGE_SOUND_PLAYED";    static public const LANG_ENG: String = "ENG";    static public const LANG_SPA: String = "SPA";    private const BAD_MOVE_BOING: String = "boing";	static const PROB_MSG_FAILURE: Number = 0.2;	static const PROB_MSG_TRYAGAIN: Number = 0.4;	static const PROB_MSG_FEEDBACK: Number = 1.0;	    static public const MSG_QUESTION: Number = 0;    static public const MSG_SUCCESS: Number = 1;    static public const MSG_FAILURE: Number = 2;    static public const MSG_TRYAGAIN: Number = 3;    static private const MSG_FEEDBACK_CLICK: Number = 4;    static private const MSG_FEEDBACK_CLICK_ONE: Number = 5;    static public const MSG_FEEDBACK: Number = 6;    static public const MSG_WELCOME: Number = 10;        static public var MSG_BEGIN_QUESTION: Array = new Array();    static public var MSG_END_QUESTION: Array = new Array();        static public const MSG_BEGIN_QUESTION_COUNT: Number = MSG_BEGIN_QUESTION[EGoal.COUNT.Text] = MSG_WELCOME + 1;    static public const MSG_END_QUESTION_COUNT: Number = MSG_END_QUESTION[EGoal.COUNT.Text] = MSG_WELCOME + 2;	        static public var MSG_SOUND: Array = new Array();        static public var NUM_SOUNDS: Array = new Array();        static public var MSG_TEXT: Array = new Array();          MSG_SOUND[MSG_SUCCESS] = "GOOD_MOVE";    MSG_SOUND[MSG_FAILURE] = "BAD_MOVE";    MSG_SOUND[MSG_TRYAGAIN] = "TRY_AGAIN";    MSG_SOUND[MSG_FEEDBACK_CLICK] = "FEEDBACK_Click";    MSG_SOUND[MSG_WELCOME] = new Array("ZooWelcome1");            NUM_SOUNDS[LANG_ENG] = new Array();    NUM_SOUNDS[LANG_SPA] = new Array();    NUM_SOUNDS[LANG_ENG][MSG_SUCCESS] = 4;    NUM_SOUNDS[LANG_ENG][MSG_FAILURE] = 1;    NUM_SOUNDS[LANG_ENG][MSG_TRYAGAIN] = 2;    NUM_SOUNDS[LANG_ENG][MSG_FEEDBACK_CLICK] = 2;    NUM_SOUNDS[LANG_ENG][MSG_FEEDBACK_CLICK_ONE] = 2;        NUM_SOUNDS[LANG_SPA][MSG_SUCCESS] = 4;    NUM_SOUNDS[LANG_SPA][MSG_FAILURE] = 1;    NUM_SOUNDS[LANG_SPA][MSG_TRYAGAIN] = 3;    NUM_SOUNDS[LANG_SPA][MSG_FEEDBACK_CLICK] = 2;    NUM_SOUNDS[LANG_SPA][MSG_FEEDBACK_CLICK_ONE] = 3;        NUM_SOUNDS[LANG_ENG][MSG_BEGIN_QUESTION_COUNT] = 1;    NUM_SOUNDS[LANG_ENG][MSG_END_QUESTION_COUNT] = 1;        NUM_SOUNDS[LANG_SPA][MSG_BEGIN_QUESTION_COUNT] = 1;    NUM_SOUNDS[LANG_SPA][MSG_END_QUESTION_COUNT] = 2;        MSG_SOUND[LANG_ENG] = new Array();    MSG_SOUND[LANG_SPA] = new Array();        MSG_SOUND[LANG_ENG][MSG_BEGIN_QUESTION_COUNT] = new Array("CountA");    MSG_SOUND[LANG_ENG][MSG_END_QUESTION_COUNT] = new Array("CountB");        MSG_SOUND[LANG_SPA][MSG_BEGIN_QUESTION_COUNT] = new Array("CountA");    MSG_SOUND[LANG_SPA][MSG_END_QUESTION_COUNT] = new Array("CountB");        MSG_TEXT[MSG_BEGIN_QUESTION_COUNT] = "How many";    MSG_TEXT[MSG_END_QUESTION_COUNT] = "do you see ?";                MSG_TEXT[MSG_SUCCESS] = "Well Done!";    MSG_TEXT[MSG_FAILURE] = "This is not correct!";    MSG_TEXT[MSG_TRYAGAIN] = "Try Again!";    MSG_TEXT[MSG_FEEDBACK_CLICK] = "You clicked on";    MSG_TEXT[MSG_FEEDBACK_CLICK_ONE] = "You clicked on a";    MSG_TEXT[MSG_WELCOME] = "Welcome to Kid's Zoo!";         public function Game4Message (pLanguage: String, pMessageType: Number = -1, pSoundName : String = null, pRandomOptions : int = 1) { 	  Util.debug("adding message of type " + pMessageType);      mLanguage = pLanguage;	  mText = "";      mMessageType = pMessageType;      mSoundArray = new Array();	  	  /*	  if(pMessageType < 0 && pSoundName) {	  	addSound(pSoundName, pRandomOptions);	  }*/	  	  /*	  else if(pMessageType < MSG_WELCOME)	  {	  	Util.debug("pMessageType: " + pMessageType);		Util.debug("adding sound " + MSG_TEXT[pMessageType]);	  	addSound(MSG_SOUND[pMessageType], NUM_SOUNDS[mLanguage][pMessageType]);	  	addText(MSG_TEXT[pMessageType]);	  }*/	        mSoundComplete = true;          }	    public function writeMessageTo(pTextBox: TextField){		pTextBox.text = mText;    }    	public function get MsgText(): String {		return mText;    }    	public function playSound() {		mSoundComplete = false;		mCurrentSound = 0;		//mSoundChannel = mSoundArray[0].play();		//if(mSoundArray.length > 1)		//	 mSoundChannel.addEventListener(Event.SOUND_COMPLETE, playNextSound, false, 0 , true);		//else mSoundChannel.addEventListener(Event.SOUND_COMPLETE, soundDone, false, 0 , true);    }		public function stopSound(){		if(!mSoundChannel) 			return; 					mSoundChannel.stop();		mSoundChannel.removeEventListener(Event.SOUND_COMPLETE, soundDone);		mSoundChannel.removeEventListener(Event.SOUND_COMPLETE, playNextSound);	}	    	private function playNextSound(event: Event) {		mCurrentSound++;		if(mCurrentSound < mSoundArray.length){			mSoundChannel = mSoundArray[mCurrentSound].play();		}		if(mCurrentSound < mSoundArray.length - 1)			 mSoundChannel.addEventListener(Event.SOUND_COMPLETE, playNextSound, false, 0 , true);		else mSoundChannel.addEventListener(Event.SOUND_COMPLETE, soundDone, false, 0 , true);    }    	private function soundDone(event: Event) {		mSoundComplete = true;		dispatchEvent(new Event(MESSAGE_SOUND_PLAYED));    }    	public function addText(pText) {		mText = pText;    }   	public function addSound(pSoundName : String, pNumOptions : int = 1, pLang : Boolean = true){		if(pNumOptions == 0)			return;    	//mSoundArray.push(createSound(pSoundName, pNumOptions, pLang));    }	//*Makes comparison question	public function makeComparisonQuestion(pCharacter : String, colors : Array) {		if (colors.length == 2)			 addText("Which group has more " + pCharacter + "s : " + colors[0] + " or " + colors[1] + " ?");		else addText("Which group has more " + pCharacter + "s : " + colors[0] + ", " + colors[1] + " or " + colors[2] + " ?");		/*		addSound("CompareWhichGroupHasMore" + pCharacter);		addSound(colors[0] + pCharacter);		for (var i : int = 1; i < colors.length; i++) {			addSound("or");			addSound(colors[i] + pCharacter);		}*/	}      //*Makes comparison question      public function makeIdentifyQuestion(pCurrentGoal : Number) {          addText("Click on " + pCurrentGoal);      }      //*Makes count question	public function makeCountQuestion(pGoal : Goal, pCharacter : String, pSubquality : String = "", pOneSound : uint = 0, cantExecutions : uint = -1,changePlusSecondQuestion : Boolean = false, pIndoors : Boolean = false){				if (!changePlusSecondQuestion)			 addText("How many " + pSubquality + " " + pCharacter + " do you see?");		else 		{			if(pIndoors)				addText("How many " + pCharacter + " " + " are there in the house now?");			else				addText("How many " + pCharacter + " " + " are there al together?");		}		    	if(pOneSound !=0){    		var soundName  : String = pGoal.quality.Text + pCharacter + pSubquality;    		//addSound(soundName);    		addText(MSG_TEXT[soundName]);    	}		/*		else {						if (pGoal.attemptCounter == 0 && (cantExecutions % 3) == 0) {				addSound("AndNow");			}    		//Begin question			if (changePlusSecondQuestion) {				addSound("INSTRUCTIONS_ChangePlus" + pCharacter + (pIndoors? "indoors" : ""));			}			else{				if (pSubquality != "")					addSound("Count" + pSubquality + pCharacter);				else addSound("Count" + pCharacter, 3);			}			    	}		*/    }   	public function makeIntermediateMessage(pFirstQuestion : Boolean, pNumCharacters : int, pCharacter : String, pIndoors : Boolean = false) {				//addSound("Look");								if(pFirstQuestion)		{			addText("Look! " + ENumber.numbers[pNumCharacters] + " " + pCharacter);			//addSound("Characters_" + pNumCharacters + "_" + pCharacter);						//if(pIndoors)					//addSound("goingToTheHouse" + ((pNumCharacters==1) ? "singular":"plural"));		}		else		{			addText("Look " + ENumber.numbers[pNumCharacters] + " more " + pCharacter + "!");						/*			if(mLanguage == "ENG")			{				addSound("MoreCharacters_" + pNumCharacters + "_" + pCharacter);				if(pIndoors)					addSound("goingToTheHouse" + ((pNumCharacters==1) ? "singular":"plural"));			}			else			{				if(pIndoors)					addSound("MoreCharacters_" + pNumCharacters + "_" + pCharacter + "_house");				else					addSound("MoreCharacters_" + pNumCharacters + "_" + pCharacter);			}			*/								}							}	public static function generateFailureSound(pLang : String, pGameGoal : Goal) : Game4Message{ 		var vReportDecision: Number = Math.random();		var gM : Game4Message;						if(vReportDecision < Game4Message.PROB_MSG_FAILURE)			gM = new Game4Message("ENG", Game4Message.MSG_FAILURE);				else if(vReportDecision < Game4Message.PROB_MSG_TRYAGAIN)				gM = new Game4Message(pLang, Game4Message.MSG_TRYAGAIN);				else			gM = new Game4Message(pLang, Game4Message.MSG_FEEDBACK_CLICK);				if (pGameGoal.quality == EGoal.COMPARISON)			 gM.addText("You clicked on " + CharQual.COLOR_NAMES[pGameGoal.currentMove]);		else        {            gM.addText("You clicked on " + pGameGoal.currentMove);        }	  return gM;	}    	public function createSound(pSoundName: String, pRandom : int = 1, pLanguage: Boolean = true): Sound {		var randomNum : int;		if(pLanguage)			pSoundName = mLanguage + "." + pSoundName;		Util.debug("adding sound " + pSoundName + " " + pRandom);		if(pRandom > 1){			randomNum = Util.getRandBtw(1,pRandom);			pSoundName += randomNum;		}  		var ClassReference: Class = getDefinitionByName(pSoundName) as Class;		return new ClassReference();    }  	public function get SoundComplete (): Boolean {		return mSoundComplete;    }  }}