package com.kpm.kpm{	/*	import mdm.FileSystem;																	//Zinc	*/	import com.kpm.util.*;	import com.kpm.reporter.*;		import flash.display.LoaderInfo;	import flash.events.*;	import flash.filesystem.File;	import flash.net.URLLoader;	import flash.net.URLRequest;	import flash.system.Capabilities;	import flash.utils.ByteArray;	import flash.utils.Timer;	import flash.utils.setTimeout;	//import flash.events.UncaughtErrorEvent;		public class KpmLogTool extends EventDispatcher	{		/*		var mSavePath:String = "";															//Zinc		*/		var kidLogFile			: KpmIO;													//AIR		var errorFile 			: KpmIO;		var saveForLaterFile	: KpmIO;		var kidReportFile		: KpmIO;		var kidPdfReportFile	: KpmIO;		var ftpFile				: KpmFtp;				var kidXML 				: XML;		var sessionTimeXML		: XML;		var bubbleSessionXML	: XML;		var otherBubblesAffected	: Array;				var bubbleSessionSet 	: Boolean;		var sessionSet 			: Boolean;		var startSessionTime	: Date;		var finishSessionTime 	: Date;		var startBubbleTime		: Date;				var currentFileName, currentFilePath : String;		var currentReportStr	: String;		var currentStream		: XML;		var numFilesToUpload	: uint;		var numFilesUploaded	: uint;						var currentMoveObj		: Object;				function KpmLogTool(){				createErrorFile();		}			/*	Summery:		 *		Setup a log file.		 *	Parameters:		 *		fileName:		 *			The name of the file to be written.		 *		overwrite:		 *			If a file with the given name already exists, and this is true,		 *			the file will be overwritten. Otherwise, the file will be left alone.		 *			Note: The name of the file will still be saved for the other functions.		 *	Returns:		 *		This funtion will return true if a file was overwritten, false otherwise.		 */		 		 public function createErrorFile()		 {		 	errorFile = new KpmIO();			errorFile.setFilePath(DriverData.KpmFolder + "data/errors.xml");					 }		public function createLogFile(pKidXML):Boolean		{            Util.debug("KpmLogTool.createLogFile");			if(!DriverData.log)				return false;						kidXML = pKidXML;						kidLogFile = new KpmIO();			kidLogFile.setFilePath(DriverData.getKidFolder(kidXML.UID) + "_log.xml");								  			saveForLaterFile = new KpmIO();			saveForLaterFile.setFilePath(DriverData.NOT_UPLOADED_FILE, DriverData.FOLDER_APP_STORAGE);									Util.debug("creating report", this);									if(kidLogFile.exists()) return false;						var todayDate : Date = new Date();			var dateXML:XML = new XML("<creationdate>"+todayDate.toString()+"</creationdate>");			var makeLogXML : XML = <LOG></LOG>;			makeLogXML.appendChild(dateXML);			makeLogXML.appendChild(kidXML.UID);			makeLogXML.appendChild(kidXML.FIRST_NAME);			makeLogXML.appendChild(kidXML.LAST_NAME);									kidLogFile.write(makeLogXML);			Util.debug("creating log " + makeLogXML.toXMLString(), this);			return true;					}				/*	Summery:		 *		Add data to the log file.		 *	Parameters:		 *		newData:		 *			The extra data to be added to the log file.		 *	Returns:		 *		True if the makeLog function was called, false otherwise.		 */				public function createSession()		{			if(!logging())				return;							startSessionTime = new Date();						sessionTimeXML = new XML("");						var session : XML = new XML(<session></session>);			session.@startSessionTime =  startSessionTime;			kidLogFile.write(session, false);			sessionSet = true;											}				public function createBubbleSession(pGame : EGame, pBubble : BubbleId)		{			//var currentGameXML : String = "<game_session" + "\" Game_id =\"" +  pGame.Text"			if(!logging())				return;								Util.debug("createBubbleSession " + DriverData);			Util.debug("createBubbleSession " + DriverData.Driver);			Util.debug("createBubbleSession " + DriverData.Driver.currentLanguage);			bubbleSessionXML = new XML(<bubble></bubble>);			bubbleSessionXML.@game_id = pGame.Text;			bubbleSessionXML.@bubbleName = pBubble.Name.Text;			bubbleSessionXML.@bubbleLevel = pBubble.Level;			bubbleSessionXML.@start = Util.getTodayDate("xquery");			bubbleSessionXML.@currentLanguage = DriverData.Driver.currentLanguage.Text;            //bubbleSessionXML.@LastOutcome = DriverData.Driver.currentKid.bubbleStatus[pBubble.Text];            Util.debug("creating bubble log", this);			Util.debug(bubbleSessionXML.toString(), this);			otherBubblesAffected = new Array();			bubbleSessionSet = true;					}				public function closeBubbleSession(pCounters : Array, pBubbleId : BubbleId)		{            Util.debug("KpmLogTool.closeBubbleSession for " + pBubbleId.Text);			//sessionXML.appexndChild(bubbleSessionXML);							if(!logging())				return;							//bubbleSessionXML.@failedCounter = pCounters[pBubbleId.Text].fail;			//bubbleSessionXML.@enjoyCounter = pCounters[pBubbleId.Text].enjoy;			//bubbleSessionXML.@passCounter = pCounters[pBubbleId.Text].pass;			bubbleSessionXML.@globalScore = DriverData.Driver.CurrentGoal.globalScore;			bubbleSessionXML.@scoreToEnjoy = DriverData.Driver.CurrentScoreToEnjoy;			bubbleSessionXML.@scoreToComplete = DriverData.Driver.CurrentScoreToPass;			bubbleSessionXML.@bubbleDuration = DriverData.Driver.CurrentData.bubbleDuration;			bubbleSessionXML.@accompanied = DriverData.accompanied;            bubbleSessionXML.@BBLogId = int(Util.getSecondsFrom1970()/11);            bubbleSessionXML.@KidId = DriverData.currentKidXML.UniqueRandomID;            bubbleSessionXML.@kidName = DriverData.currentKidXML.FIRST_NAME + " " + DriverData.currentKidXML.LAST_NAME;            bubbleSessionXML.@isDebug = Util.DEBUG;            for each(var item : XML in otherBubblesAffected)				bubbleSessionXML.appendChild(item);            Util.debug("KpmLogTool.closeBubbleSession : about to upload log to ftp");            DriverData.currentKidXML.LAST_SYNC = Util.getSecondsFrom1970();            DriverData.kpmDb.uploadBubbleChangesFromLog(otherBubblesAffected);            kidLogFile.write(bubbleSessionXML, false);			kidLogFile.write("\n", false);		}        public function uploadBB()        {            Util.debug("KpmLogTool.uploadBB")            if(DriverData.logToFtp)            {                Util.debug("KpmLogTool.uploadBB")                DriverData.ftpFile.uploadBBLogToDB(DriverData.FTP_SERVER + "/data/", bubbleSessionXML);            }        }        public function uploadTaskLogToDB()        {            Util.debug("KpmLogTool.uploadTaskLogToDB");            DriverData.ftpFile.uploadTaskLogToDB(DriverData.FTP_SERVER + "/data/", bubbleSessionXML);        }				public function addBubbleChanged(pId : BubbleId , pNewStatus : Boolean, pLastOutcome : EBStatus)		{			if(!logging() || DriverData.allBubblesUnlocked || !otherBubblesAffected)				return;            var bubbleChanged : XML = new XML(<bubble_status_changed></bubble_status_changed>);            bubbleChanged.@Id = pId.Text;            bubbleChanged.@NowIsActive = pNewStatus;            if(pLastOutcome)                bubbleChanged.@Outcome = pLastOutcome.Text;            else                bubbleChanged.@Outcome = "None";            Util.debug("KpmLogTool.addBubbleChanged " + bubbleChanged.@Id + " " + DriverData.Driver.currentBubbleId.Text)            if(otherBubblesAffected.length == 0)            {                Util.debug("saving bubble data");                bubbleSessionXML.@nowIsActive = bubbleChanged.@NowIsActive;                bubbleSessionXML.@outcome = bubbleChanged.@Outcome;            }			//for each(var )			otherBubblesAffected.push(bubbleChanged);					}						public function reportError(pError : String, pThrow : Boolean = false)		{            Util.debug("KpmLogTool.reportErrror");			var xmlError : XML = new XML("<error></error>");			xmlError.@error = pError;			xmlError.@time = new Date();			if(DriverData.Driver && DriverData.Driver.currentBubble)				xmlError.@bubble = DriverData.Driver.currentBubble;			if(!errorFile)				createErrorFile();            if(DriverData.currentKidXML)                xmlError.@UniqueRandomID = DriverData.currentKidXML.UniqueRandomID;							errorFile.write(xmlError, false);            uploadToFtp(DriverData.FTP_ERROR_PATH, "error_" + xmlError.@time + ".txt", xmlError);			if(pThrow)				throw new Error(pError);									}								public function uploadSessionFtp()		{			uploadToFtp(DriverData.FTP_LOG_PATH, "log_" + kidXML.UID +  "_" + finishSessionTime  + ".txt", sessionTimeXML);		}				public function uploadToFtp(pPath : String, pFileName : String, pStream : *)		{//			var finishSessionTime :Date = new Date();//			sessionXML.@startTime = startSessionTime.toString();//			sessionXML.@finishTime = finishSessionTime.toString();             Util.debug("KpmLogTool.uploadToFtp");			if(!DriverData.logToFtp)				return;						if(pStream is XML)			{				currentStream = pStream;				pStream = pStream.toXMLString();			}							if(DriverData.ftpFile)			{						Util.debug("uploading to ftp " + pFileName, this);						Util.debug(pStream, this);					DriverData.ftpFile.uploadToFtp(DriverData.FTP_SERVER, pPath, pFileName, pStream);				DriverData.ftpFile.addEventListener(DriverData.NO_INTERNET, noInternetConnection);				currentFilePath = pPath;				currentFileName = pFileName;								//EventManager.addEvent(ftpFile, DriverData.NO_INTERNET, noInternetConnection, pStream); 							}					}				public function closeSession()		{			if(!logging())				return;							//var sessionStr : String = "\n</session>\n"; // startTime="+ startSessionTime.toDateString() ">";						if(startSessionTime)			{				finishSessionTime = new Date();				var sessionDuration : Number = finishSessionTime.time - startSessionTime.time				//Util.debug("sessionDuration " + sessionDuration, this);				sessionDuration = sessionDuration / 60000.0;				//Util.debug("sessionDuration " + sessionDuration, this);				var sessionTimeXMLString = "\n<sessionTime"										+ " startTime=\"" + startSessionTime.toString()										+ "\" playDuration =\"" + sessionDuration.toFixed(2)										+ "\" finishTime =\""	+ finishSessionTime.toString()										+ "\">\n</sessionTime>\n";				sessionTimeXML = new XML(sessionTimeXMLString);			}						Util.debug("closing session", this);			Util.debug(sessionTimeXML, this);						kidLogFile.write(sessionTimeXML.toXMLString(), false);			//kidLogFile.write(sessionStr, false);		}				public function noInternetConnection(e: Event)		{			Util.debug("could not upload", this);			Util.debug(currentFilePath, this);			Util.debug(currentFileName, this);			Util.debug(currentStream, this);									var notUploadedXML : XML = new XML("<file></file>");			notUploadedXML.@time = new Date();			notUploadedXML.@filePath = currentFilePath;			notUploadedXML.@fileName = currentFileName;			notUploadedXML.@Id = kidXML.UID;				notUploadedXML.appendChild(currentStream);						saveForLaterFile.write(notUploadedXML, false);			DriverData.ftpFile.dispatchEvent(new Event(DriverData.DATA_SENT));		}				public function openFilesToUpload(e : Event)		{				if(saveForLaterFile.exists())			{				this.dispatchEvent(new Event(DriverData.FILES_UPLOADING));				var myLoader: URLLoader = new URLLoader();				myLoader.load(new URLRequest(DriverData.FOLDER_APP_STORAGE + "data/notUploaded.xml"));				myLoader.addEventListener(Event.COMPLETE, checkFilesToUpload);							}			else			{				this.dispatchEvent(new Event(DriverData.FILES_UPLOADING));				this.dispatchEvent(new Event(DriverData.FILES_UPLOADED));			}					}		 		 		public function checkFilesToUpload(e : Event)		{				var notUploadedXML 		: XMLList = new XMLList(e.target.data);			var filePath, fileName 	: String;			var stream 				: XML;			var ftpArray 			: Array;						ftpArray = new Array();						if (!DriverData.ftpFile)				return;								var i = 0;						for each (var fileXML : XML in notUploadedXML)			{				if( i > 60)					return;									Util.debug("looping fileXML " + i, this);				filePath = fileXML.@filePath;				fileName = fileXML.@fileName;				stream = fileXML;											ftpArray.push(new KpmFtp());				ftpArray[i].uploadToFtp(DriverData.FTP_SERVER, filePath, fileName, stream);				ftpArray[i].addEventListener(DriverData.DATA_SENT, fileUploaded);								i++;			}						numFilesToUpload = i;											}						public function fileUploaded(e : Event)		{			numFilesUploaded++;			Util.debug("files uploaded " + numFilesUploaded + " " + numFilesToUpload, this);						if(numFilesUploaded == numFilesToUpload)			{				KpmIO.deleteFromStorage(DriverData.NOT_UPLOADED_FILE);				this.dispatchEvent(new Event(DriverData.FILES_UPLOADED));			}								}				public function addToLog(newData:XML):Boolean		{			if(!logging())				return false;																				if(!sessionSet || !bubbleSessionSet) {				Util.debug("session or game not set", this); return false;			}								if(!("@success" in newData))			{				Util.debug("task empty");				return false;			}						Util.debug("writing task xml", this);			Util.debug(newData.toXMLString(), this);			bubbleSessionXML.appendChild(newData);						return true;		}						public function addMoveToLog(pLogObject : Object)		{			if(!pLogObject.time || pLogObject.success == null)			{				Util.debug("move object mal formed", this);				return;			}			var newMove : String = Util.objectToXmlString("move", pLogObject);			var newData : XML = new XML(newMove);			addToLog(newData);					}					public function writeBubblesSorted()		{			var sortedBubblesPath : String = DriverData.SORTED_BUBBLES_FILE;;						if(KpmIO.existsInStorage(sortedBubblesPath))				return;							var sortedBubblesFile : KpmIO = new KpmIO();			sortedBubblesFile.setFilePath(sortedBubblesPath);						Util.debug("writing sorted bubbles", this);						var bubbleMenuXML : XML = DriverData.getInstance().bubbleMenuXML;									//			if(!bubbleMenuXML)//				DriverData.logTool.reportError("bubbleMenuXML is not defined yet", false);//			//			sortedBubblesFile.write(bubbleMenuXML);								}		//		public function generateReport(pKid : Kid) //		{//			var bubbleDef : Array = DriverData.getInstance().BubbleDef;//			var bubble : KpmBubble;//			var bStatus : EBStatus; //			var sortedStandards : Array = DriverData.getInstance().BubbleNamesPerStd;//			//			currentReportStr  = "Report for kid Id " + pKid.Id + "\n";//			//			kidReportFile = new KpmIO();//			kidReportFile.setFilePath(DriverData.getKidFolder(pKid.Id) + "_" + DriverData.REPORT_FILE +".txt")//			kidPdfReportFile = new KpmIO();//			kidPdfReportFile.setFilePath(DriverData.getKidFolder(pKid.Id) + "_" + DriverData.REPORT_FILE + ".pdf");////						////			for (var item : String in sortedStandards)////			{////				var bubblesArray : Array = sortedStandards[item]////				currentReportStr += "\n" + item +"\n";////				////				for each (var bId1 : BubbleId in bubblesArray)////				{////					bubble = bubbleDef[bId1.Text];					////					bStatus = pKid.BubbleStatus[bubble.Id.Text];////					////					if(bubble.ReportStr)////					if(bStatus == EBStatus.Complete || bStatus == EBStatus.Enjoy || bStatus == EBStatus.Failed)////						currentReportStr+= bubble.Id.Counter + ") " + bubble.Id.Text + ": " +  DriverData.reportStrings[bStatus.Text]  + " " + bubble.ReportStr + "\n";////				}////			}//			//			//			//Finish this//			//			for (var i =0; i < DriverData.NUM_STANDARDS; i++)//			{	//				currentReportStr += "\n" + DriverData.getInstance().standards[i].readableText +"\n\n"; //				var bName : EBName ;//				//				for (var j=0; j< DriverData.getInstance().BubbleNamesPerStd[i].length; j++)//				{//					bName = DriverData.getInstance().BubbleNamesPerStd[i][j];//					//					if(bName.Reportable)//					for(var k= bName.MinLevel; k <= bName.MaxLevel ; k++)//					{//						bubble = bubbleDef[bName.Text+"_"+k];					//						bStatus = pKid.BubbleStatus[bubble.Id.Text];//						//						if(bStatus == EBStatus.Passed || bStatus == EBStatus.Enjoy || bStatus == EBStatus.Failed)//							currentReportStr+= //							(bubble.Id.Name.Index+1) +"." + bubble.Id.Level + " " + bubble.Id.Text + ": \n" +  //							DriverData.reportStrings[bStatus.Text]  + " " + bubble.ReportStr + "\n";//					}//				}//				//			}//			//			kidReportFile.write(currentReportStr);//			kidPdfReportFile.writePdf(currentReportStr);//			//		}				public function logging() : Boolean		{			return (kidLogFile && DriverData.log);		}				public function get BubbleSessionXML() : XML	{   return bubbleSessionXML; } 	}					}