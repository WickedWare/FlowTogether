package com.kpm.kpm{	import com.kpm.util.KpmIO;	import com.kpm.util.MovieList;	import com.kpm.util.Point2D;	import com.kpm.util.Util;	import com.kpm.reporter.excel.Kid;	import com.kpm.ui.UIConst;	import com.kpm.ui.UIGod;	import com.kpm.ui.UIPage;		import fl.controls.RadioButton;	import fl.controls.RadioButtonGroup;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.net.URLRequest;	import flash.net.navigateToURL;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;			public class TeacherPage extends UIPage	{				var numKidsToDelete : uint;		var numDeletedKids : uint ; 		var classToDelete : XML;		var className : String;		var classesRadioGroup : RadioButtonGroup;		var deletingClass : Boolean;		public function TeacherPage()		{			super(UIConst.TeacherPage);		}				public override function showPage(e : Event = null)		{				createClassPage_Bt.visible = true;			createClassPage.visible = false;						changePasswordPage.visible = false;			deleteClassPage.visible = false;			copyDataFolder_Page.visible = false;			copyDataFolder_Page.copyFolder_checkBox.label = "";									if(!inited)			{				createClassPage_Bt.addEventListener(MouseEvent.CLICK, showCreateClassPage);				//tutorialPage_Bt.addEventListener(MouseEvent.CLICK, showTutorialPage);				changePasswordPage_Bt.addEventListener(MouseEvent.CLICK, showChangePasswordPage);							changePasswordPage.doChangePassword.addEventListener(MouseEvent.CLICK, doChangePassword);				createClassPage.doCreateClass.addEventListener(MouseEvent.CLICK, doCreateClass);								deleteClassPage_Bt.addEventListener(MouseEvent.CLICK, showDeleteClassPage);				deleteClassPage.doDeleteClass.addEventListener(MouseEvent.CLICK, doDeleteClass1);								copyDataFolder_Bt.addEventListener(MouseEvent.CLICK, showCopyDataFolder_Page);				copyDataFolder_Page.doCopyDataFolder_Bt.addEventListener(MouseEvent.CLICK, doCopyDataFolder);				copyDataFolder_Page.cancelCopyDataFolder_Bt.addEventListener(MouseEvent.CLICK, cancelCopyDataFolder);												inited = true;			}						deleteClassPage.confirmDeleteClass_Page.visible = false;			super.showPage();		}				function loadClassesToDelete()		{			deleteClassPage.visible = true;			var deleteRadioButtons : Array = new Array();						for(var i=0; i< deleteClassPage.numChildren; i++)				if(deleteClassPage.getChildAt(i) is RadioButton)					deleteRadioButtons.push(deleteClassPage.getChildAt(i));											for(var j=0; j< deleteRadioButtons.length ; j++)				Util.removeChild(deleteRadioButtons[j]);							var radioButtonList : MovieList = new MovieList(true);			var ySpace = 30;			var xSpace = 250;						var pPos : Point2D = new Point2D(10,10);			var tf : TextFormat = new TextFormat(); 			tf.color = 0x660066; 			tf.font = "GROBOLD"; 			tf.size = 18; 						classesRadioGroup = new RadioButtonGroup("Group 1");			var radioButtonArray : Array = new Array();			for (var k=0; k < DriverData.configXML.classes.children().length(); k++)			{				var rb = new RadioButton();				rb.setStyle("textFormat", tf);				rb.label = DriverData.configXML.classes.children()[k].@name;				rb.group = classesRadioGroup;				rb.textField.autoSize = TextFieldAutoSize.LEFT;				rb.x = pPos.x + int(k/5)*xSpace;				rb.y = pPos.y + (k%5)*ySpace;				deleteClassPage.addChild(rb);			}		}				public function showCreateClassPage(e : Event)		{			createClassPage.visible = true;			changePasswordPage.visible = false;			deleteClassPage.visible = false;			copyDataFolder_Page.visible = false;			createClassPage.tNewClassName_Tf.text = "";			createClassPage.tNewClassName_Tf.stage.focus = createClassPage.tNewClassName_Tf; 		}		//		public function showTutorialPage(e : Event)//		{//			//			createClassPage.visible = false;//			changePasswordPage.visible = false;//			deleteClassPage.visible = false;//			copyDataFolder_Page.visible = false;//			createClassPage.tNewClassName_Tf.text = "";//			createClassPage.tNewClassName_Tf.stage.focus = createClassPage.tNewClassName_Tf; //		}//								public function showDeleteClassPage(e : Event)		{			loadClassesToDelete();			createClassPage.visible = false;			copyDataFolder_Page.visible = false;			changePasswordPage.visible = false;		}				public function showConfirmationPage(e : Event)		{		}				public function showChangePasswordPage(e : Event)		{			createClassPage.visible = false;			changePasswordPage.visible = true;			copyDataFolder_Page.visible = false;			deleteClassPage.visible = false;			changePasswordPage.tPassword_Tf.text = "";			changePasswordPage.tPassword_Tf.stage.focus = changePasswordPage.tPassword_Tf; 					}				public function doCreateClass(e : Event)		{			UIGod.debug("TeacherPage.createClass");						var classNameTf : TextField =  createClassPage.tNewClassName_Tf;						if(classNameTf.text == "")			{				UIGod.feedback("Class name cannot be empty");				return;			}								var classId : int = 0;			var classIdFound : Boolean = false;						for each (var classXML : XML in DriverData.configXML.classes.children())			{				Util.debug(classXML.@name);								if(classXML.@name == classNameTf.text)				{					UIGod.feedback("Name \'" + classNameTf.text + "'\ has already been taken. Please choose another name for the new class");					return;				}								if(int(classXML.@id) == classId && !classIdFound)					classId++;				else					classIdFound = true;							}						var classXML1 = new XML(<class name={classNameTf.text} id={classId}/>);						DriverData.configXML.classes.appendChild(classXML1);			DriverData.configXML.classes.@currentId = classXML1.@id;						DriverData.configXML.classes[0] = Util.sortXMLByAttribute(DriverData.configXML.classes[0], "id");			Util.debug("sorting classes " , this);			Util.debug(DriverData.configXML.classes[0]);									DriverData.configFile.write(DriverData.configXML);				createClassPage.visible = false;			UIGod.feedback("You successfully created the class " + classNameTf.text + ". Now add some players!");		}				private function hideConfirmDelete(e : Event)		{			deleteClassPage.confirmDeleteClass_Page.visible = false;			deleteClassPage.confirmDeleteClass_Page.Yes_Bt.removeEventListener(MouseEvent.CLICK, doDeleteClass2);			deleteClassPage.confirmDeleteClass_Page.No_Bt.removeEventListener(MouseEvent.CLICK, hideConfirmDelete);			 		}				private function doDeleteClass1(e : Event)		{			deleteClassPage.confirmDeleteClass_Page.Yes_Bt.removeEventListener(MouseEvent.CLICK, doDeleteClass2);			deleteClassPage.confirmDeleteClass_Page.No_Bt.removeEventListener(MouseEvent.CLICK, hideConfirmDelete);			deletingClass = true;									if(!classesRadioGroup.selection)			{				UIGod.feedback("Please select a class to delete");				}			else if(DriverData.configXML.classes.children().length() <= 1)			{				UIGod.feedback("Cannot delete the only class");				}			else			{				deleteClassPage.confirmDeleteClass_Page.visible = true;				deleteClassPage.setChildIndex(deleteClassPage.confirmDeleteClass_Page, deleteClassPage.numChildren-1);				deleteClassPage.confirmDeleteClass_Page.Yes_Bt.addEventListener(MouseEvent.CLICK, doDeleteClass2);				deleteClassPage.confirmDeleteClass_Page.No_Bt.addEventListener(MouseEvent.CLICK, hideConfirmDelete);			}		}						private function doDeleteClass2(e : Event)		{			deleteClassPage.confirmDeleteClass_Page.Yes_Bt.removeEventListener(MouseEvent.CLICK, doDeleteClass2);			deleteClassPage.confirmDeleteClass_Page.No_Bt.removeEventListener(MouseEvent.CLICK, hideConfirmDelete);			deleteClassPage.confirmDeleteClass_Page.visible = false;									UIGod.debug("TeacherPage.deleteclass");			Util.debug(classesRadioGroup.selection.label);			numKidsToDelete = 0;			numDeletedKids = 0;							className =  classesRadioGroup.selection.label;						classToDelete = DriverData.configXML.classes.children().(@name==className)[0];									DriverData.configXML.classes.@currentId = classToDelete.@id;			DriverData.configFile.write(DriverData.configXML);				DriverData.getInstance().addEventListener("endOfParsing", deleteKidsFolder);			DriverData.getInstance().addEventListener("noKids", onDeleteKidComplete);									DriverData.getInstance().reloadKidsProfileInfo1();		}				private function deleteKidsFolder(e : Event)		{						DriverData.getInstance().removeEventListener("endOfParsing", deleteKidsFolder);			DriverData.getInstance().removeEventListener("noKids", onDeleteKidComplete);									if(deletingClass)			for each (var kid : com.kpm.reporter.excel.Kid in DriverData.kidsInfo)			{				var pFrom : KpmIO = new KpmIO();				var pTo : KpmIO = new KpmIO();				pFrom.setFilePath(DriverData.getKidFolder() + kid.uid());				pTo.setFilePath(DriverData.getKidFolder() + "/recyclebin/" +  Util.getTodayDate("compact")  + "/" + kid.uid());				KpmIO.copyToAsync(pFrom, pTo, onDeleteKidComplete, null, true);				numKidsToDelete++;			}					}				public function onDeleteKidComplete(e : Event)		{			DriverData.getInstance().removeEventListener("endOfParsing", deleteKidsFolder);						DriverData.getInstance().removeEventListener("noKids", onDeleteKidComplete);									numDeletedKids++;						Util.debug("on delete kid complete" + numDeletedKids + " " + numKidsToDelete);						if(numDeletedKids >= numKidsToDelete && deletingClass)			{				Util.debug("removing radio button" + classesRadioGroup.selection);				classesRadioGroup.selection.visible = false;				UIGod.feedback("Class " + classToDelete.@name + " successfully deleted ");				Util.debug("deleting class " + classToDelete.childIndex() + classToDelete.toXMLString());				DriverData.getInstance().selectNextClass();				DriverData.getInstance().reloadKidsProfileInfo1();								delete DriverData.configXML.classes.children()[classToDelete.childIndex()];				DriverData.configFile.write(DriverData.configXML);				deletingClass = false;							}						}				public function doChangePassword(e : Event)		{			UIGod.debug("TeacherPage.doChangePassword!");						var password : TextField =  changePasswordPage.tPassword_Tf;						if(password.text == "")			{				UIGod.feedback("Password cannot be empty");				return;			}							DriverData.teacherPassword = password.text;			DriverData.configXML.teacherPassword = DriverData.teacherPassword;			DriverData.configFile.write(DriverData.configXML);			changePasswordPage.visible = false;						UIGod.feedback("Password successfully changed");					}						public function showCopyDataFolder_Page(e : Event)		{			copyDataFolder_Page.visible = true;			createClassPage.visible = false;			changePasswordPage.visible = false;			deleteClassPage.visible = false;			copyDataFolder_Page.copyFolder_checkBox.selected = false;				}				public function doCopyDataFolder(e : Event)		{			if(!copyDataFolder_Page.copyFolder_checkBox.selected)			{				UIGod.feedback("You need to agree by checking the checkbox to copy the data folder to the desktop");				return;			}						var appData : KpmIO = new KpmIO();			appData.setFilePath("data", DriverData.FOLDER_APP_STORAGE);						var desktopFolder : KpmIO  = new KpmIO();			desktopFolder.setFilePath("DataFolder_" + DriverData.configXML.teacherName + "_" + Util.getTodayDate("compact"), DriverData.FOLDER_DESKTOP);												Util.debug("TeacherPage.openKidsFolder " + KpmIO.DEFAULT_LOCATION.nativePath)			KpmIO.copyToAsync(appData, desktopFolder, copyDataFolder_Success);					}				public function cancelCopyDataFolder(e : Event)		{			copyDataFolder_Page.visible = false;		}				public function copyDataFolder_Success(e : Event)		{			UIGod.feedback("Data folder has been copied successfully");			copyDataFolder_Page.visible = false;					}								}}