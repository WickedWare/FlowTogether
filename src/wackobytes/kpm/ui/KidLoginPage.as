package com.kpm.kpm{	import com.kpm.util.KpmIO;import com.kpm.util.KpmSound;import com.kpm.util.MovieList;	import com.kpm.util.Point2D;	import com.kpm.util.Util;    import com.vuzum.search.Search;import com.kpm.kpm.DriverData;import com.kpm.ui.*;import com.kpm.kpm.ZxingClient;import com.vuzum.search.mcListItem;import fl.controls.RadioButton;		import flash.display.Bitmap;	import flash.display.DisplayObject;	import flash.display.Loader;	import flash.display.MovieClip;	import flash.errors.IOError;	import flash.events.Event;	import flash.events.InvokeEvent;	import flash.events.MouseEvent;import flash.events.TimerEvent;import flash.filesystem.*;	import flash.geom.Point;import flash.media.Sound;import flash.media.SoundTransform;import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.text.TextField;	import flash.text.TextFieldAutoSize;	import flash.text.TextFormat;import flash.utils.Timer;import flash.utils.setInterval;public class KidLoginPage extends UIPage	{	    public static const SEARCH_BUTTON_PRESSED : String = "SEARCH_BUTTON_PRESSED"        public static const SEARCH_ENABLED : Boolean = false;		public const NUM_NAMES 	: uint = 4;		public const ROWS 		: uint = 4;		public const COLS 		: uint = 7;		public const MATRIX_POS	: Point2D = new Point2D(50,40);		public const imageSize 	: uint = 90;		public const space 		: Point2D = new Point2D(50, 30);			public const distractorNames : Array = ["Will Smith", "Michael Alfaro", "James Abbot", "Kakmandu Arias", "Billy Jean", "Bill Farmer"];				var mPicLoaders 		: Array = new Array();		var mPicMovies			: Array = new Array();		var mKidCols			: Array = new Array();		var mKidNames_mc		: MovieList ;		var mBuildDir 			: KpmIO = new KpmIO();		var mAnswerNamesList	: Array;		var correctAnswer : String;						var imagesLoaded  	: uint = 0;		var imagesToLoad  	: uint = 0;		var clickTries		: uint = 0;		var clickedKidId 	: String ;		var feedback		: TextField;        var mKidMatrix_ml : MovieList;    //XML CONTENTS        public static var searchContentsXML	: XML = new XML();        public function KidLoginPage()		{			super(UIConst.KidLoginPage);            mBuildDir.setFilePath(DriverData.getKidFolder());            mBuildDir.listDirectory();            mBuildDir.addEventListener(KpmIO.DIR_LIST_COMPLETE, switchProfileNames);            Util.debug("KidLoginPage().tSearch" +  tSearch);            //tSearch.show(false);            tSearch.visible = false;            if(!KidLoginPage.SEARCH_ENABLED)                tShowSearch_Bt.visible = false;            else                tShowSearch_Bt.addEventListener(MouseEvent.CLICK,  showSearch)            var welcomeSound : Sound = new WelcomeKpm();            welcomeSound.play(0,0, new SoundTransform(0.4));            //TODO : add event listener pressing enter on the search bar.            function onSearchBtnPressed(e : Event)            {               Util.debug(this + ".onSearchBtnPressed " + tSearch.mcSearch.mcInputText.txt);            }            tNextClass_Bt.addEventListener(MouseEvent.CLICK, onNextClass_Click);            tScanQRCode.addEventListener(MouseEvent.CLICK, onScanQRCode_Click) ;		}        public function showSearch(e : Event)        {            tShowSearch_Bt.visible = false;            tSearch.show();            tSearch.visible = true;            tSearch.tSearch_Bt.addEventListener(MouseEvent.CLICK, onSearch_Bt_Click);            tSearch.tSearch_Bt.buttonMode = true;            for(var i =0; i < COLS; i++)            {                mKidCols[i].visible = false;            }        }				public function onSearch_Bt_Click(e : Event)		{			Util.debug("KidLoginPage.onSearch_Bt_Click" + tSearch.tSearch_Txt.text);            var urlVars : String = Util.createURLVars(tSearch.tSearch_Txt.text, "firstName lastName", " ");            DriverData.kpmDb.addEventListener("searchKidNames_Complete", searchKidNames_Complete);            DriverData.kpmDb.searchKidNames(urlVars);		}        //Function called after completting search  names, lastnames and images of search candidates        public function searchKidNames_Complete(e : Event)        {            // split (ids and imagenames) into idList and imagenameList)            // for (var i=0; i < idList.length; i++)            // 12312312312; clockworkorangebunny; 12312312312; clockworkorangebunny;            Util.debug("KidLoginPage.searchKidNames_Complete" + DriverData.kpmDb.loaderPhpFile.data);            var idimagesString : String = DriverData.kpmDb.loaderPhpFile.data;            var idImages : Array = idimagesString.split(";");            Util.debug("array of kid ids and images found in search results")            Util.printArray(idImages);            var currentKidId 		: String;            var imageMovie : MovieClip ;            var imageIO : KpmIO;            var oneName : Boolean  = false;            var mPicLoaders = new Array(ROWS * COLS);            var mKidCols = new Array(COLS);            for(var i =0; i < COLS; i++)            {                if(mKidMatrix_ml)                    mKidMatrix_ml.init();                mKidMatrix_ml = new MovieList(false, 50, imageSize + 20, null, null, COLS + 1);                mKidMatrix_ml.init();                addChild(mKidMatrix_ml);                mKidCols[i] = mKidMatrix_ml;                Util.debug("adding " + mKidMatrix_ml + " to " + mKidCols[i] + " at " + i);            }            for (var j = 0; j < idImages.length-4; j=j+4)            {                Util.debug("looping ids" + idImages[j] + " " + idImages[j+1]);                imageIO = new KpmIO();                imageIO.setFilePath(DriverData.FOLDER_ICONS_DEST + idImages[j+1], "documents");                if(!imageIO.exists())                    Util.debug("imagepath " + DriverData.FOLDER_ICONS_DEST + idImages[j+1] + " does not exist");                else                {                    i++;                    mPicLoaders[i] = new Loader();                    var request : URLRequest =                            new URLRequest(imageIO.mFile.url);                    Util.debug("opening " + request.url, this);                    var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);                    mPicLoaders[i].load(request, context);                    Util.debug("attempting to finish loading image " + j + " " + (idImages.length - 4-1));                    if(j >= idImages.length - 4-1)                    {                        Util.debug(idImages.length-4-1 + " " + j);                        mPicLoaders[i].contentLoaderInfo.addEventListener(Event.COMPLETE, finishLoadingImage);                    }                    imageMovie = new KpmSearchAvatar();                    imageMovie.image.addChild(mPicLoaders[i]);                    imageMovie.tName.text = idImages[j+2] + " "+ idImages[j+3];                    imageMovie.id = currentKidId;                    imageMovie.addEventListener(MouseEvent.CLICK, onImageClick);                    imageMovie.buttonMode = true;                    Util.debug("placing " + imageMovie + " in " + (int(i/COLS)));                    mKidCols[int((i-1)/COLS)].add(imageMovie);                    //mKidCols[int((i-1)/COLS)].visible = false;                }            }        }    public override function showPage(e : Event = null)		{			refreshLogin();			super.showPage();		}				function showImages()		{			mPicLoaders = new Array(COLS*ROWS)			mPicMovies = new Array(COLS*ROWS);			mKidCols = new Array(COLS);						mBuildDir.setFilePath(DriverData.getKidFolder());			mBuildDir.listDirectory();			mBuildDir.addEventListener(KpmIO.DIR_LIST_COMPLETE, readImages);						//var mKidMatrix_ml : MovieList;			for(var i =0; i < COLS; i++)			{                if(mKidMatrix_ml)                    mKidMatrix_ml.init();            	mKidMatrix_ml = new MovieList(false, 50, imageSize + space.x, null, null, COLS + 1);				mKidMatrix_ml.init();				addChild(mKidMatrix_ml);				mKidCols[i] = mKidMatrix_ml;								Util.debug("adding " + mKidMatrix_ml + " to " + mKidCols[i] + " at " + i);							}						Util.debug("current id " + DriverData.configXML.classes.@currentId);				var currentClassXML : XML = DriverData.configXML.classes.children().(@id == DriverData.configXML.classes.@currentId)[0];							if(!currentClassXML)				{					DriverData.configXML.classes.@currentId = DriverData.configXML.classes.children()[0].@id;					currentClassXML = DriverData.configXML.classes.children()[0];					if(!Util.RELEASE)						throw new Error("current class id was not found");				}									var className : String = "";				if (DriverData.configXML.classes.children().length() > 1)				{					className = "to the " + DriverData.configXML.classes.children().(@id == DriverData.configXML.classes.@currentId)[0].@name + " class";									}									tNextClass_Bt.visible = DriverData.configXML.classes.children().length() > 1;									tWelcome.text = "Welcome " + className + ", Choose your Avatar";								setImagesVisible(null, false);				DriverData.getInstance().addEventListener("endOfParsing", setImagesVisible);				DriverData.getInstance().reloadKidsProfileInfo1();										}        function onScanQRCode_Click(e : Event)        {            container.CurrentPage = UIConst.QRCodePage;        }				function onNextClass_Click(e : Event)		{			Util.debug("current id " + DriverData.configXML.classes.@currentId);						//get node with current id.			//add one to the child			//var classes : XMLList = DriverData.configXML.classes.children();			Util.debug("current class XML " + (DriverData.configXML.classes.@currentId+1));			Util.debug("current class XML " + DriverData.configXML.classes.children().length());						DriverData.getInstance().selectNextClass();			showPage();					}				function refreshLogin()		{			removeKidImages();			removeKidNames();			readConfig();			tTeacherField.stage.focus = tTeacherField;		}        function switchProfileNames(e : Event = null)        {            Util.debug("KidLoginPage.switchProfileNames")            for each ( var currentPath : String in mBuildDir.mFileList)            {                Util.debug("looping each folder " + DriverData.getFolderName(currentPath))                DriverData.switchProfileToUniqueId(DriverData.getFolderName(currentPath));            }        }				function readImages(e : Event)		{						var currentKidId 		: String;			var i : uint = 0;			var imageMovie : MovieClip ;			var oneName : Boolean  = false;			var imageIO : KpmIO;			imagesToLoad = 0;			imagesLoaded = 0;            Util.debug("reading images");						for each ( var currentPath : String in mBuildDir.mFileList)			{								currentKidId = DriverData.getFolderName(currentPath);								Util.debug("reading images "+ currentPath, this);				Util.debug("current kid " + currentKidId);				Util.debug("class " + currentKidId.charAt(0) + " " + DriverData.configXML.classes.@currentId);				Util.debug("pex 0");								if(DriverData.validKidFolder(currentKidId))				{					Util.debug("pex 1");					oneName = true;										i++; imagesToLoad++;					mPicLoaders[i] = new Loader();					Util.debug("loading " + imagesToLoad);																try						{						imageIO = new KpmIO();						imageIO.setFilePath(DriverData.getKidFolder(currentKidId) + ".jpg");												if(!imageIO.exists())						{								Util.debug("image dont exist");							throw new Error();						}						else						{							var request : URLRequest = 							new URLRequest("file:///" + KpmIO.DEFAULT_LOCATION.nativePath + "/" + DriverData.getKidFolder(currentKidId) + ".jpg");							                               Util.debug("Requesting File");                            Util.debug(request.url, this);					   		var context:LoaderContext = new LoaderContext(false, ApplicationDomain.currentDomain);					   						   								mPicLoaders[i].load(request, context);							mPicLoaders[i].contentLoaderInfo.addEventListener(Event.COMPLETE, finishLoadingImage);														imageMovie = new MovieClip();							imageMovie.addChild(mPicLoaders[i]);							imageMovie.id = currentKidId;							imageMovie.addEventListener(MouseEvent.CLICK, onImageClick);							imageMovie.buttonMode = true;													Util.debug("placing " + imageMovie + " in " + (int(i/COLS)));							mKidCols[int((i-1)/COLS)].add(imageMovie);						}					}										catch(e : Error)					{						i--; imagesToLoad--;						//throw new Error("could not open image!" + currentKidId);					}				}			}						Util.debug("DriverData.configXML.classes.children().length()" + DriverData.configXML.classes.children().length());						if(!oneName && DriverData.configXML.classes.children().length() == 1)				UIGod.feedback("KidLoginPage : No players in this class. Login as teacher to create kids.");			//else if(!oneName)			//	onNextClass_Click(null);									//buggg			//reportFeedback("default location " + KpmIO.DEFAULT_LOCATION.nativePath);			//reportFeedback(mBuildDir.mFile.nativePath + "" );											}				function readConfig()		{			if(DriverData.configXML)				showImages();			else			{							DriverData.configFile.setFilePath(DriverData.KpmFolder + DriverData.CONFIG_FILE);				DriverData.configFile.read();				DriverData.configFile.addEventListener(KpmIO.READ_COMPLETE, finishReadingConfig);				DriverData.configFile.addEventListener(KpmIO.READ_ERROR, finishReadingConfig);			}		}				function finishLoadingImage(e : Event)		{            Util.debug("KidLoginPage.finishLoadingImage")  ;			imagesLoaded++;						var bm : Bitmap = Bitmap(e.target.loader.content);			bm.smoothing = true;						//if(imagesLoaded >= imagesToLoad)			//{				for(var i =0; i < COLS; i++)				{                    Util.debug("repositioning and resizing movieclips")					mKidCols[i].setSize(imageSize, imageSize);					mKidCols[i].x = MATRIX_POS.x;					mKidCols[i].y = MATRIX_POS.y + i*(imageSize + space.y);				}			//}					}				function setImagesVisible (pEvent : Event = null, pVisible : Boolean = true)		{			DriverData.getInstance().removeEventListener("endOfParsing", setImagesVisible);			Util.debug("KidLoginPage : finished loading images, setting them visible")			for(var i =0; i < COLS; i++)			{				mKidCols[i].visible = pVisible;			}            setChildIndex(Credits_Page, numChildren-1);		}				function finishReadingConfig(e : Event)		{			if(e.type == KpmIO.READ_COMPLETE)			{				DriverData.configXML = XML(DriverData.configFile.readContents);				DriverData.teacherPassword = String(DriverData.configXML.teacherPassword);								Util.debug("finish reading config", this);				Util.debug(DriverData.teacherPassword);										if(!DriverData.configXML.classes[0])				{					if(!DriverData.configXML.teacherName[0])						DriverData.configXML.appendChild(<teacherName>Teacher Name</teacherName>);											DriverData.configXML.appendChild(<classes currentId="0"> <class name="Default" id="0"/>  </classes>);					DriverData.configFile.write(DriverData.configXML);				}				showImages();			}				else if(e.type == KpmIO.READ_ERROR)			{				DriverData.logTool.reportError ("Error could not read config file");			}			}				function onImageClick( e : Event)		{//			clickTries++;//			//			if(clickTries >= 3)//			{//				reportFeedback("Too many tries. call your teacher!");//			}						Util.debug(e.currentTarget.id);			clickedKidId = e.currentTarget.id;			if(!DriverData.HOME_VERSION)			{				populateNameChoices();				showNameChoices();			}			else			{				loadKpm1();			}														}										function populateNameChoices()		{			tNextClass_Bt.visible = false;						mAnswerNamesList = new Array();			correctAnswer = null;			Util.debug("KidLogin.populateNameChoices" + clickedKidId);									///Util.debug("looping all the names in configXML");			//Util.debug("finish loading kids");			for (var p in DriverData.kidsInfo)			{				Util.debug(p);			}						correctAnswer = DriverData.kidsInfo[clickedKidId].firstName() + " " +DriverData.kidsInfo[clickedKidId].lastName();						if(!correctAnswer)				DriverData.logTool.reportError ("error could not find the right name");						mAnswerNamesList.push(correctAnswer);						for (var i =0; i < NUM_NAMES - 1; i++)			{				mAnswerNamesList.push(String(Util.getRandomElementNotIn(distractorNames, mAnswerNamesList)));			}						Util.shuffleArray(mAnswerNamesList);			Util.debug("answer names ");			Util.printArray(mAnswerNamesList);		}				function removeKidImages()		{			for(var j =0; j < COLS; j++) 				Util.removeChild(mKidCols[j]);		}				function removeKidNames()		{			Util.removeChild(mKidNames_mc)		}				function showNameChoices()		{			removeKidImages();			removeKidNames();			//container.CurrentPage = UIConst.EmptyPage;							mKidNames_mc = new MovieList(true, 0, 100);			mKidNames_mc.init();			mKidNames_mc.x = 200;			mKidNames_mc.y = 100;			addChild(mKidNames_mc);						var format1 : TextFormat = new TextFormat();			format1.font = "Arial";			format1.size = 24;									for(var i=0 ; i < NUM_NAMES; i++)			{				Util.debug("answer at " + i + " " +  mAnswerNamesList[i]);				var nameTxt : TextField = new TextField();				var nameMc : MovieClip = new MovieClip();				var bgTxtMc : MovieClip = new OrangeSquare();												nameTxt.text = mAnswerNamesList[i];				nameTxt.setTextFormat(format1);				nameTxt.autoSize = TextFieldAutoSize.LEFT;				nameMc.nameChoice = mAnswerNamesList[i];								addChild(nameMc);				nameMc.addChild(nameTxt);				nameMc.buttonMode = true;				nameTxt.selectable = false;				nameMc.addEventListener(MouseEvent.CLICK, onNameClick);				mKidNames_mc.add(nameMc);								bgTxtMc.width = 250;                if(nameMc.width > bgTxtMc.width)                    bgTxtMc.width = nameMc.width;				bgTxtMc.height = 60;                bgTxtMc.x -= 20;                bgTxtMc.y -= 15;								nameMc.addChild(bgTxtMc);			}				}				function onNameClick(e : Event)		{			Util.debug("on name click");			Util.debug(e.currentTarget.nameChoice);			Util.debug(clickedKidId);			removeKidNames();            //e.currentTarget.text = "Correct! Logging you in";            if(correctAnswer == e.currentTarget.nameChoice)			{                loadKpm1();			}			else			{                UIGod.feedback("Wrong password! try again ... ")                showPage();			}					}        function loadKpm1()        {            DriverData.Driver.setLoadingPage(true);            DriverData.Driver.ui.hideUI();            var loadTimer : Timer = new Timer(500, 1);            loadTimer.addEventListener(TimerEvent.TIMER, loadKpm2) ;            loadTimer.start();        }				function loadKpm2(e : Event = null)		{            refreshLogin();			DriverData.currentGamerId = clickedKidId;			DriverData.allBubblesUnlocked = false;			DriverData.randomBubble = true;			DriverData.log = true;            this.dispatchEvent(new Event(UIConst.LOAD_BOOTH_PAGE));        }							}}