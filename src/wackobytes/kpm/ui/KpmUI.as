package com.kpm.ui{	import com.kpm.kpm.Driver;	import com.kpm.kpm.DriverData;	import com.kpm.kpm.KidCreatorPage;	import com.kpm.util.MovieList;	import com.kpm.util.Util;		import flash.display.MovieClip;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.geom.Point;	import flash.text.TextField;	import flash.utils.setTimeout;			import flash.text.TextFormat;	import com.kpm.util.KpmComboBox;		public class KpmUI extends UIGod	{		public static var DEFAULT_PAGE_POS 	: Point = new Point(0.05,0.05);				var driver : Driver;						public function KpmUI(pWindow_mc : MovieClip,  pDriver : Driver)		{			super();			driver = pDriver;			initialize(pWindow_mc, KpmUI.DEFAULT_PAGE_POS, false);			driver.stage.addEventListener(MouseEvent.MOUSE_UP, onClickAnywhere);			setUIBt(driver.tBack_Bt, driver.tFeedback_Tf, driver.tDebug_Tf);								debug("KpmUI Manager : initialized");			addPages();			linkBts();			debug("KpmUI Manager : pages created");		}				function onClickAnywhere(e : Event)		{			Util.debug("on click anywhere " + UIGod.feedback_Tf.text);			if(UIGod.feedback_Tf.text != "")			{				//feedback("");				//UIGod.feedbackTimeout = setTimeout( UIGod.feedback , 100);				UIGod.feedback("");			}            if(driver.tKidLoginPage && driver.tKidLoginPage.Credits_Page.visible)                driver.tKidLoginPage.Credits_Page.gotoAndPlay(2);		}				public function addPages()		{				//addPage(new UIPage(UIConst.KpmGame, driver.tKpmGame));			//addPage(new UIPage(UIConst.ConfirmPage, driver.tConfirmPage));			//addPage(new EmptyPage());						addPage(driver.tClassPage);			addPage(driver.tKidCreatorPage);			addPage(driver.tKidLoginPage);			addPage(driver.tTeacherPage);			addPage(driver.tPdfReporterPage);            addPage(driver.tQRCodePage)			//addPage(driver.tTutorialPage);								}				public function linkBts()		{						//link bt : page, button, function			linkBt(UIConst.KidLoginPage, UIConst.teacherPage_Bt, goToTeacherPage);						pages[UIConst.KidLoginPage].tTeacherField.tabIndex = 1;			pages[UIConst.KidLoginPage].teacherPage_Bt.tabIndex = 2;									linkBt(UIConst.TeacherPage, UIConst.playTeacher_Bt, driver.playTeacher);			linkBt(UIConst.TeacherPage, UIConst.classPage_Bt, UIConst.ClassPage);			linkBt(UIConst.TeacherPage, UIConst.tutorialPage_Bt, UIConst.TutorialPage);			//events within pages			pages[UIConst.KidLoginPage].addEventListener(UIConst.LOAD_BOOTH_PAGE, driver.loadBoothPage);						back_Bt.addEventListener(MouseEvent.CLICK, goBack);								}				public function confirmAction()		{					}				public function cancelAction()		{					}				public override function set CurrentPage(pPage : String)		{			if(pPage == UIConst.KidLoginPage)			{				Util.debug("kidlogin page from kpmUi !");				driver.addMouseIdleEvents(false);			}						super.CurrentPage = pPage;		}				public override function goBack(e : Event)		{			Util.debug("KpmUI.goBack");						if(driver.currentGame)				driver.returnToBoothPage();			else if(main_mc.visible == false)			{				showUI();				driver.hideBoothPage();				driver.resetBubbleFeedback();			}			else if(CurrentPage == UIConst.KidLoginPage)				pages[UIConst.KidLoginPage].showPage();			else				super.goBack(e);					}								public function goToTeacherPage(e : Event)		{						var password : TextField =  pages[UIConst.KidLoginPage].tTeacherField;						UIGod.debug("KpmUI.goToTeacherPage " + password.text);						if(!DriverData.teacherPassword)			{				feedback("No teacher password set");				return;			}									if(password.text == DriverData.teacherPassword)				CurrentPage = UIConst.TeacherPage;			else			{				var message : String = "Teacher password is not correct, try again " ;				message += DriverData.teacherPassword + " " + password.text								feedback(message);			}										password.text = "";											}				public function loadPDFReport()		{			Util.debug("load new pdf report");			pages[UIConst.PdfReporterPage].loadPDFReport("family");		}				public function generatePDFReport()		{			Util.debug("load new pdf report");			pages[UIConst.PdfReporterPage].generateReport(null);		}			}}