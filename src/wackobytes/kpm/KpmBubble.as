package com.kpm.kpm {import com.kpm.util.GameLib;	import com.de.polygonal.ds.TreeNode;				public class KpmBubble	{		private var id 			: BubbleId;		var weight 				: uint;			var totalTasks			: uint;		var neededPassCounter	: int;		var neededFailCounter	: int;		var passCounter			: int;		var failCounter 		: int;		var enjoyedCounter		: int;	    //a 2d array of EActivityName representing the bubbles that 	    //this bubble requires	    var predecessorGraph	: Array;	    var successorList		: Array;	    var nodeIndex			: int = -1;	    var initialStatus		: Boolean;	    var scoreToEnjoy		: Number;	    var scoreToComplete 	: Number;		var reportStr			: String;		var games 			    : Array;        //Flags to determine whether this bubble is in the FwdPoset, or BwdPoset        var belongsToFwdPoset   : Boolean;        var belongsToBwdPoset   : Boolean;        public static const PASSED : int = 0;        public static const ENJOYED : int = 1;        public static const FAILED : int = 2;		public function KpmBubble(pId : BubbleId, pWeight : int = 1, pInitialActive : Boolean = false,								  pPredecessorList : TreeNode = null, pSuccessorList : Array = null,								  pEnjoyScore : Number = -1, pCompleteScore : Number = 1, 								  pPassCounter : int = 1, pFailedCounter : int = 1, pReportStr : String = null,                                  pFwd : Boolean = false, pBwd : Boolean = false )		{			games = new Array(GameLib.NUM_GAMES);            predecessorGraph = new Array(3);            successorList = new Array(3);			id = pId;				weight = pWeight;			initialStatus = pInitialActive;			//predecessorGraph[Poset.FULL] = pPredecessorList;			//successorList[Poset.FULL] = pSuccessorList;			neededPassCounter = pPassCounter;			neededFailCounter = pFailedCounter;			reportStr = pReportStr;										if(pEnjoyScore != 0)				scoreToEnjoy = pEnjoyScore;			if(pCompleteScore != 0)				scoreToComplete = pCompleteScore;            belongsToFwdPoset = pFwd;            belongsToBwdPoset = pBwd;					}        public function addPredecessorToPoset(bubble : KpmBubble, poset : int)        {            if(!predecessorGraph[poset])                predecessorGraph[poset] = new TreeNode("AND");            predecessorGraph[poset].addNode(new TreeNode(bubble.id));        }				public function addGame(eGame : String)		{			games[eGame] = true;					}		public function get Games() : Array			{ return games; }				public function get Level() 				{ return id.Level; }		public function get Id() 		: BubbleId	{ return (id); }		public function get ScoreToEnjoy() 	  		{ return scoreToEnjoy; }		public function get ScoreToComplete() 		{ return scoreToComplete; }		public function get ReportStr() : String	{ return reportStr; }		public function toString() 		: String 	{ return ("[ Bubble : " + id + ", weight : " + weight + ", initial status : " + initialStatus + ", enjoy : " + scoreToEnjoy + ", complete : " + scoreToComplete + " needed pass Counter " + neededPassCounter + " needed failed Counter " + neededFailCounter + "FwdPoset " + belongsToFwdPoset + "BwdPoset " + belongsToBwdPoset + " ] "); }	}}